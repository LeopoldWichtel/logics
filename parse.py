#!/usr/bin/python
#-*- coding: utf-8 -*-



class Node(object):
	"""
	This is an AST node.
	"""

	def __init__(self, emit = None, match = None, children = None):
		self.emit = emit
		self.match = match
		self.children = children or []

	def dump(self, level=0):
		if self.emit:
			txt = "%s%s" % (level * " ", self.emit)
			if self.match and self.match != self.emit:
				txt += " (%s)" % self.match

			print(txt)
			level += 1

		for child in self.children:
			child.dump(level)

class ParserToken(object):
	state = 0
	line = 0
	column = 0

	node = None

	value = None

class ParserControlBlock(object):

	# Stack
	stack = []
	tos = None

	# Values
	ret = None

	# State
	act = None
	idx = None
	lhs = None

	# Lookahead
	sym = -1
	old_sym = -1
	len = 0

	# Lexical analysis
	lexem = None
	next = None
	eof = None
	is_eof = None

	# Input buffering
	input = None
	buf = ""

	# Error handling
	error_delay = 3
	error_count = 0

	line = 1
	column = 1

	


class Parser(object):

	# Actions
	_ERROR = 0
	_REDUCE = 1
	_SHIFT = 2

	# Parse tables
	_symbols = (
		("&eof", "", 3, 0, 0, 1),
		("<=", "<=", 2, 0, 0, 1),
		("or", "or", 2, 0, 0, 1),
		("if", "if", 2, 0, 0, 1),
		("else", "else", 2, 0, 0, 1),
		("not", "not", 2, 0, 0, 1),
		("and", "and", 2, 0, 0, 1),
		(">=", ">=", 2, 0, 0, 1),
		("==", "==", 2, 0, 0, 1),
		("<", "<", 2, 0, 0, 1),
		("True", "True", 2, 0, 0, 1),
		("**", "**", 2, 0, 0, 1),
		("for", "for", 2, 0, 0, 1),
		("False", "False", 2, 0, 0, 1),
		("<>", "<>", 2, 0, 0, 1),
		(">", ">", 2, 0, 0, 1),
		("in", "in", 2, 0, 0, 1),
		("!=", "!=", 2, 0, 0, 1),
		("whitespace", "", 2, 0, 1, 1),
		("IDENT", "IDENT", 2, 0, 0, 1),
		("STRING", "STRING", 2, 0, 0, 0),
		("NUMBER", "NUMBER", 2, 0, 0, 1),
		("]", "", 1, 0, 0, 1),
		(".", "", 1, 0, 0, 1),
		("[", "", 1, 0, 0, 1),
		("-", "", 1, 0, 0, 1),
		(")", "", 1, 0, 0, 1),
		("+", "", 1, 0, 0, 1),
		("*", "", 1, 0, 0, 1),
		("~", "", 1, 0, 0, 1),
		("%", "", 1, 0, 0, 1),
		("/", "", 1, 0, 0, 1),
		("(", "", 1, 0, 0, 1),
		(",", "", 1, 0, 0, 1),
		("in'", "", 0, 0, 0, 1),
		("<>'", "", 0, 0, 0, 1),
		("!='", "", 0, 0, 0, 1),
		("and'", "", 0, 0, 0, 1),
		("not'", "", 0, 0, 0, 1),
		("&whitespace*", "", 0, 1, 1, 1),
		("or'", "", 0, 0, 0, 1),
		("=='", "", 0, 0, 0, 1),
		("<'", "", 0, 0, 0, 1),
		(">'", "", 0, 0, 0, 1),
		(">='", "", 0, 0, 0, 1),
		("<='", "", 0, 0, 0, 1),
		("+'", "", 0, 0, 0, 1),
		("if'", "", 0, 0, 0, 1),
		("STRING'", "", 0, 0, 0, 1),
		("for'", "", 0, 0, 0, 1),
		(",'", "", 0, 0, 0, 1),
		("NUMBER'", "", 0, 0, 0, 1),
		("else'", "", 0, 0, 0, 1),
		("logic'", "", 0, 0, 0, 1),
		("~'", "", 0, 0, 0, 1),
		("True'", "", 0, 0, 0, 1),
		("False'", "", 0, 0, 0, 1),
		("IDENT'", "", 0, 0, 0, 1),
		("%'", "", 0, 0, 0, 1),
		("**'", "", 0, 0, 0, 1),
		("/'", "", 0, 0, 0, 1),
		("-'", "", 0, 0, 0, 1),
		("*'", "", 0, 0, 0, 1),
		("]'", "", 0, 0, 0, 1),
		(".'", "", 0, 0, 0, 1),
		("['", "", 0, 0, 0, 1),
		("('", "", 0, 0, 0, 1),
		(")'", "", 0, 0, 0, 1),
		("&whitespace+", "", 0, 1, 1, 1),
		("expression", "", 0, 0, 0, 1),
		("logic", "", 0, 0, 0, 1),
		("if_else", "", 0, 0, 0, 1),
		("test", "", 0, 0, 0, 1),
		("&embedded_3+", "", 0, 0, 0, 1),
		("term", "", 0, 0, 0, 1),
		("&embedded_2", "", 0, 0, 0, 1),
		("&embedded_3", "", 0, 0, 0, 1),
		("or_test", "", 0, 0, 0, 1),
		("not_test", "", 0, 0, 0, 1),
		("comparison", "", 0, 0, 0, 1),
		("&embedded_1", "", 0, 0, 0, 1),
		("&embedded_1+", "", 0, 0, 0, 1),
		("&embedded_0", "", 0, 0, 0, 1),
		("and_test", "", 0, 0, 0, 1),
		("expr", "", 0, 0, 0, 1),
		("&embedded_0+", "", 0, 0, 0, 1),
		("&embedded_6", "", 0, 0, 0, 1),
		("&embedded_6?", "", 0, 0, 0, 1),
		("STRING+", "", 0, 0, 0, 1),
		("comprehension", "", 0, 0, 0, 1),
		("&embedded_7*", "", 0, 0, 0, 1),
		("&whitespace", "", 0, 1, 1, 1),
		("&embedded_7", "", 0, 0, 0, 1),
		("&embedded_7+", "", 0, 0, 0, 1),
		("&embedded_5", "", 0, 0, 0, 1),
		("power", "", 0, 0, 0, 1),
		("entity", "", 0, 0, 0, 1),
		("factor", "", 0, 0, 0, 1),
		("&embedded_4", "", 0, 0, 0, 1),
		("trailer+", "", 0, 0, 0, 1),
		("list", "", 0, 0, 0, 1),
		("atom", "", 0, 0, 0, 1),
		("trailer", "", 0, 0, 0, 1)
	)
	_productions = (
		("logic -> expression ~&eof", "", 2, 70),
		("expression -> test", "", 1, 69),
		("test -> if_else", "", 1, 72),
		("test -> or_test", "", 1, 72),
		("if_else -> or_test if' or_test else' test", "if_else", 5, 71),
		("or_test -> and_test &embedded_0+", "or_test", 2, 77),
		("&embedded_0 -> or' and_test", "", 2, 82),
		("&embedded_0+ -> &embedded_0+ &embedded_0", "", 2, 85),
		("&embedded_0+ -> &embedded_0", "", 1, 85),
		("or_test -> and_test", "", 1, 77),
		("and_test -> not_test &embedded_1+", "and_test", 2, 83),
		("&embedded_1 -> and' not_test", "", 2, 80),
		("&embedded_1+ -> &embedded_1+ &embedded_1", "", 2, 81),
		("&embedded_1+ -> &embedded_1", "", 1, 81),
		("and_test -> not_test", "", 1, 83),
		("not_test -> not' not_test", "not_test", 2, 78),
		("not_test -> comparison", "", 1, 78),
		("comparison -> expr &embedded_3+", "comparison", 2, 79),
		("&embedded_2 -> =='", "", 1, 75),
		("&embedded_2 -> >='", "", 1, 75),
		("&embedded_2 -> <='", "", 1, 75),
		("&embedded_2 -> <'", "", 1, 75),
		("&embedded_2 -> >'", "", 1, 75),
		("&embedded_2 -> <>'", "", 1, 75),
		("&embedded_2 -> !='", "", 1, 75),
		("&embedded_2 -> in'", "", 1, 75),
		("&embedded_2 -> not' in'", "", 2, 75),
		("&embedded_3 -> &embedded_2 expr", "", 2, 76),
		("&embedded_3+ -> &embedded_3+ &embedded_3", "", 2, 73),
		("&embedded_3+ -> &embedded_3", "", 1, 73),
		("comparison -> expr", "", 1, 79),
		("expr -> expr +' term", "add", 3, 84),
		("expr -> expr -' term", "sub", 3, 84),
		("expr -> term", "", 1, 84),
		("term -> term *' factor", "mul", 3, 74),
		("term -> term /' factor", "div", 3, 74),
		("term -> term %' factor", "mod", 3, 74),
		("term -> factor", "", 1, 74),
		("&embedded_4 -> +'", "", 1, 98),
		("&embedded_4 -> -'", "", 1, 98),
		("&embedded_4 -> ~'", "", 1, 98),
		("factor -> &embedded_4 factor", "factor", 2, 97),
		("factor -> power", "", 1, 97),
		("power -> entity **' factor", "power", 3, 95),
		("power -> entity", "", 1, 95),
		("entity -> atom trailer+", "entity", 2, 96),
		("trailer+ -> trailer+ trailer", "", 2, 99),
		("trailer+ -> trailer", "", 1, 99),
		("entity -> atom", "", 1, 96),
		("trailer -> (' list )'", "", 3, 102),
		("trailer -> [' expression ]'", "", 3, 102),
		("trailer -> .' IDENT'", "", 2, 102),
		("&embedded_5 -> True'", "", 1, 94),
		("&embedded_5 -> False'", "", 1, 94),
		("atom -> &embedded_5", "", 1, 101),
		("atom -> NUMBER'", "", 1, 101),
		("atom -> IDENT'", "", 1, 101),
		("STRING+ -> STRING+ STRING'", "", 2, 88),
		("STRING+ -> STRING'", "", 1, 88),
		("atom -> STRING+", "strings", 1, 101),
		("atom -> comprehension", "", 1, 101),
		("atom -> [' list ]'", "", 3, 101),
		("atom -> (' expression )'", "atom", 3, 101),
		("comprehension -> [' expression for' IDENT' in' expression &embedded_6? ]'", "comprehension", 8, 89),
		("&embedded_6 -> if' expression", "", 2, 86),
		("&embedded_6? -> &embedded_6", "", 1, 87),
		("&embedded_6? -> ", "", 0, 87),
		("list -> expression &embedded_7*", "list", 2, 100),
		("&embedded_7 -> ,' expression", "", 2, 92),
		("&embedded_7+ -> &embedded_7+ &embedded_7", "", 2, 93),
		("&embedded_7+ -> &embedded_7", "", 1, 93),
		("&embedded_7* -> &embedded_7+", "", 1, 90),
		("&embedded_7* -> ", "", 0, 90),
		("list -> ", "list", 0, 100),
		("&whitespace -> @whitespace", "", 1, 91),
		("&whitespace+ -> &whitespace+ &whitespace", "", 2, 68),
		("&whitespace+ -> &whitespace", "", 1, 68),
		("&whitespace* -> &whitespace+", "", 1, 39),
		("&whitespace* -> ", "", 0, 39),
		("or' -> \"or\" &whitespace*", "", 2, 40),
		("and' -> \"and\" &whitespace*", "", 2, 37),
		("not' -> \"not\" &whitespace*", "", 2, 38),
		("==' -> \"==\" &whitespace*", "", 2, 41),
		(">=' -> \">=\" &whitespace*", "", 2, 44),
		("<=' -> \"<=\" &whitespace*", "", 2, 45),
		("<' -> \"<\" &whitespace*", "", 2, 42),
		(">' -> \">\" &whitespace*", "", 2, 43),
		("<>' -> \"<>\" &whitespace*", "", 2, 35),
		("!=' -> \"!=\" &whitespace*", "", 2, 36),
		("in' -> \"in\" &whitespace*", "", 2, 34),
		("+' -> '+' &whitespace*", "", 2, 46),
		("-' -> '-' &whitespace*", "", 2, 61),
		("*' -> '*' &whitespace*", "", 2, 62),
		("/' -> '/' &whitespace*", "", 2, 60),
		("%' -> '%' &whitespace*", "", 2, 58),
		("**' -> \"**\" &whitespace*", "", 2, 59),
		("(' -> '(' &whitespace*", "", 2, 66),
		(")' -> ')' &whitespace*", "", 2, 67),
		("[' -> '[' &whitespace*", "", 2, 65),
		("]' -> ']' &whitespace*", "", 2, 63),
		(".' -> '.' &whitespace*", "", 2, 64),
		("IDENT' -> @IDENT &whitespace*", "", 2, 57),
		(",' -> ',' &whitespace*", "", 2, 50),
		("NUMBER' -> @NUMBER &whitespace*", "", 2, 51),
		("for' -> \"for\" &whitespace*", "", 2, 49),
		("if' -> \"if\" &whitespace*", "", 2, 47),
		("STRING' -> @STRING &whitespace*", "", 2, 48),
		("True' -> \"True\" &whitespace*", "", 2, 55),
		("False' -> \"False\" &whitespace*", "", 2, 56),
		("~' -> '~' &whitespace*", "", 2, 54),
		("else' -> \"else\" &whitespace*", "", 2, 52),
		("logic' -> &whitespace* logic", "", 2, 53)
	)
	_act = (
		((18, 3, 74), ),
		((18, 3, 74), ),
		((19, 2, 3), (20, 2, 4), (21, 2, 5), (5, 2, 10), (27, 2, 12), (25, 2, 14), (29, 2, 15), (32, 2, 19), (24, 2, 20), (10, 2, 21), (13, 2, 22), ),
		((18, 3, 74), ),
		((18, 3, 74), ),
		((18, 3, 74), ),
		((0, 3, 0), ),
		((3, 2, 27), ),
		((2, 2, 29), ),
		((6, 2, 32), ),
		((18, 3, 74), ),
		((5, 2, 10), (8, 2, 35), (7, 2, 36), (1, 2, 37), (9, 2, 38), (15, 2, 39), (14, 2, 40), (17, 2, 41), (16, 2, 42), (27, 2, 12), (25, 2, 14), ),
		((18, 3, 74), ),
		((28, 2, 48), (31, 2, 49), (30, 2, 50), ),
		((18, 3, 74), ),
		((18, 3, 74), ),
		((19, 2, 3), (20, 2, 4), (21, 2, 5), (27, 2, 12), (25, 2, 14), (29, 2, 15), (32, 2, 19), (24, 2, 20), (10, 2, 21), (13, 2, 22), ),
		((11, 2, 54), ),
		((32, 2, 19), (24, 2, 20), (23, 2, 57), ),
		((18, 3, 74), ),
		((18, 3, 74), ),
		((18, 3, 74), ),
		((18, 3, 74), ),
		((20, 2, 4), ),
		((19, 2, 3), (20, 2, 4), (21, 2, 5), (5, 2, 10), (27, 2, 12), (25, 2, 14), (29, 2, 15), (32, 2, 19), (24, 2, 20), (10, 2, 21), (13, 2, 22), ),
		((19, 2, 3), (20, 2, 4), (21, 2, 5), (5, 2, 10), (27, 2, 12), (25, 2, 14), (29, 2, 15), (32, 2, 19), (24, 2, 20), (10, 2, 21), (13, 2, 22), ),
		((19, 2, 3), (20, 2, 4), (21, 2, 5), (5, 2, 10), (27, 2, 12), (25, 2, 14), (29, 2, 15), (32, 2, 19), (24, 2, 20), (10, 2, 21), (13, 2, 22), ),
		((18, 3, 74), ),
		((19, 2, 3), (20, 2, 4), (21, 2, 5), (5, 2, 10), (27, 2, 12), (25, 2, 14), (29, 2, 15), (32, 2, 19), (24, 2, 20), (10, 2, 21), (13, 2, 22), ),
		((18, 3, 74), ),
		((2, 2, 29), ),
		((19, 2, 3), (20, 2, 4), (21, 2, 5), (5, 2, 10), (27, 2, 12), (25, 2, 14), (29, 2, 15), (32, 2, 19), (24, 2, 20), (10, 2, 21), (13, 2, 22), ),
		((18, 3, 74), ),
		((6, 2, 32), ),
		((19, 2, 3), (20, 2, 4), (21, 2, 5), (5, 2, 10), (27, 2, 12), (25, 2, 14), (29, 2, 15), (32, 2, 19), (24, 2, 20), (10, 2, 21), (13, 2, 22), ),
		((18, 3, 74), ),
		((18, 3, 74), ),
		((18, 3, 74), ),
		((18, 3, 74), ),
		((18, 3, 74), ),
		((18, 3, 74), ),
		((18, 3, 74), ),
		((18, 3, 74), ),
		((19, 2, 3), (20, 2, 4), (21, 2, 5), (27, 2, 12), (25, 2, 14), (29, 2, 15), (32, 2, 19), (24, 2, 20), (10, 2, 21), (13, 2, 22), ),
		((5, 2, 10), (8, 2, 35), (7, 2, 36), (1, 2, 37), (9, 2, 38), (15, 2, 39), (14, 2, 40), (17, 2, 41), (16, 2, 42), ),
		((16, 2, 42), ),
		((19, 2, 3), (20, 2, 4), (21, 2, 5), (27, 2, 12), (25, 2, 14), (29, 2, 15), (32, 2, 19), (24, 2, 20), (10, 2, 21), (13, 2, 22), ),
		((19, 2, 3), (20, 2, 4), (21, 2, 5), (27, 2, 12), (25, 2, 14), (29, 2, 15), (32, 2, 19), (24, 2, 20), (10, 2, 21), (13, 2, 22), ),
		((18, 3, 74), ),
		((18, 3, 74), ),
		((18, 3, 74), ),
		((19, 2, 3), (20, 2, 4), (21, 2, 5), (27, 2, 12), (25, 2, 14), (29, 2, 15), (32, 2, 19), (24, 2, 20), (10, 2, 21), (13, 2, 22), ),
		((19, 2, 3), (20, 2, 4), (21, 2, 5), (27, 2, 12), (25, 2, 14), (29, 2, 15), (32, 2, 19), (24, 2, 20), (10, 2, 21), (13, 2, 22), ),
		((19, 2, 3), (20, 2, 4), (21, 2, 5), (27, 2, 12), (25, 2, 14), (29, 2, 15), (32, 2, 19), (24, 2, 20), (10, 2, 21), (13, 2, 22), ),
		((18, 3, 74), ),
		((19, 2, 3), (20, 2, 4), (21, 2, 5), (27, 2, 12), (25, 2, 14), (29, 2, 15), (32, 2, 19), (24, 2, 20), (10, 2, 21), (13, 2, 22), ),
		((32, 2, 19), (24, 2, 20), (23, 2, 57), ),
		((18, 3, 74), ),
		((19, 2, 3), (20, 2, 4), (21, 2, 5), (5, 2, 10), (27, 2, 12), (25, 2, 14), (29, 2, 15), (32, 2, 19), (24, 2, 20), (10, 2, 21), (13, 2, 22), ),
		((19, 2, 3), (20, 2, 4), (21, 2, 5), (5, 2, 10), (27, 2, 12), (25, 2, 14), (29, 2, 15), (32, 2, 19), (24, 2, 20), (10, 2, 21), (13, 2, 22), ),
		((19, 2, 3), ),
		((26, 2, 71), ),
		((12, 2, 72), (33, 2, 73), ),
		((22, 2, 77), ),
		((4, 2, 78), ),
		((27, 2, 12), (25, 2, 14), ),
		((28, 2, 48), (31, 2, 49), (30, 2, 50), ),
		((28, 2, 48), (31, 2, 49), (30, 2, 50), ),
		((33, 2, 73), ),
		((26, 2, 71), ),
		((22, 2, 77), ),
		((18, 3, 74), ),
		((18, 3, 74), ),
		((18, 3, 74), ),
		((33, 2, 73), ),
		((19, 2, 3), (20, 2, 4), (21, 2, 5), (5, 2, 10), (27, 2, 12), (25, 2, 14), (29, 2, 15), (32, 2, 19), (24, 2, 20), (10, 2, 21), (13, 2, 22), ),
		((19, 2, 3), ),
		((18, 3, 74), ),
		((18, 3, 74), ),
		((19, 2, 3), (20, 2, 4), (21, 2, 5), (5, 2, 10), (27, 2, 12), (25, 2, 14), (29, 2, 15), (32, 2, 19), (24, 2, 20), (10, 2, 21), (13, 2, 22), ),
		((16, 2, 42), ),
		((19, 2, 3), (20, 2, 4), (21, 2, 5), (5, 2, 10), (27, 2, 12), (25, 2, 14), (29, 2, 15), (32, 2, 19), (24, 2, 20), (10, 2, 21), (13, 2, 22), ),
		((3, 2, 27), ),
		((22, 2, 77), ),
		((19, 2, 3), (20, 2, 4), (21, 2, 5), (5, 2, 10), (27, 2, 12), (25, 2, 14), (29, 2, 15), (32, 2, 19), (24, 2, 20), (10, 2, 21), (13, 2, 22), )
	)
	_go = (
		((91, 3, 76), (68, 2, 1), (39, 2, 2), ),
		((91, 3, 75), ),
		((70, 3, 111), (69, 2, 6), (72, 3, 1), (71, 3, 2), (77, 2, 7), (83, 2, 8), (78, 2, 9), (79, 3, 16), (84, 2, 11), (74, 2, 13), (97, 3, 37), (98, 2, 16), (95, 3, 42), (96, 2, 17), (101, 2, 18), (94, 3, 54), (88, 2, 23), (89, 3, 60), (38, 2, 24), (46, 3, 38), (61, 3, 39), (66, 2, 25), (65, 2, 26), (57, 3, 56), (51, 3, 55), (48, 3, 58), (55, 3, 52), (56, 3, 53), (54, 3, 40), ),
		((91, 3, 76), (68, 2, 1), (39, 3, 101), ),
		((91, 3, 76), (68, 2, 1), (39, 3, 106), ),
		((91, 3, 76), (68, 2, 1), (39, 3, 103), ),
		(),
		((47, 2, 28), ),
		((82, 3, 8), (85, 2, 30), (40, 2, 31), ),
		((80, 3, 13), (81, 2, 33), (37, 2, 34), ),
		((91, 3, 76), (68, 2, 1), (39, 3, 81), ),
		((75, 2, 43), (76, 3, 29), (73, 2, 44), (38, 2, 45), (41, 3, 18), (44, 3, 19), (45, 3, 20), (42, 3, 21), (43, 3, 22), (35, 3, 23), (36, 3, 24), (34, 3, 25), (46, 2, 46), (61, 2, 47), ),
		((91, 3, 76), (68, 2, 1), (39, 3, 90), ),
		((62, 2, 51), (60, 2, 52), (58, 2, 53), ),
		((91, 3, 76), (68, 2, 1), (39, 3, 91), ),
		((91, 3, 76), (68, 2, 1), (39, 3, 109), ),
		((97, 3, 41), (98, 2, 16), (95, 3, 42), (96, 2, 17), (101, 2, 18), (94, 3, 54), (88, 2, 23), (89, 3, 60), (46, 3, 38), (61, 3, 39), (66, 2, 25), (65, 2, 26), (57, 3, 56), (51, 3, 55), (48, 3, 58), (55, 3, 52), (56, 3, 53), (54, 3, 40), ),
		((59, 2, 55), ),
		((102, 3, 47), (99, 2, 56), (66, 2, 58), (65, 2, 59), (64, 2, 60), ),
		((91, 3, 76), (68, 2, 1), (39, 3, 96), ),
		((91, 3, 76), (68, 2, 1), (39, 3, 98), ),
		((91, 3, 76), (68, 2, 1), (39, 3, 107), ),
		((91, 3, 76), (68, 2, 1), (39, 3, 108), ),
		((48, 3, 57), ),
		((78, 3, 15), (79, 3, 16), (84, 2, 11), (74, 2, 13), (97, 3, 37), (98, 2, 16), (95, 3, 42), (96, 2, 17), (101, 2, 18), (94, 3, 54), (88, 2, 23), (89, 3, 60), (38, 2, 24), (46, 3, 38), (61, 3, 39), (66, 2, 25), (65, 2, 26), (57, 3, 56), (51, 3, 55), (48, 3, 58), (55, 3, 52), (56, 3, 53), (54, 3, 40), ),
		((69, 2, 61), (72, 3, 1), (71, 3, 2), (77, 2, 7), (83, 2, 8), (78, 2, 9), (79, 3, 16), (84, 2, 11), (74, 2, 13), (97, 3, 37), (98, 2, 16), (95, 3, 42), (96, 2, 17), (101, 2, 18), (94, 3, 54), (88, 2, 23), (89, 3, 60), (38, 2, 24), (46, 3, 38), (61, 3, 39), (66, 2, 25), (65, 2, 26), (57, 3, 56), (51, 3, 55), (48, 3, 58), (55, 3, 52), (56, 3, 53), (54, 3, 40), ),
		((69, 2, 62), (72, 3, 1), (71, 3, 2), (77, 2, 7), (83, 2, 8), (78, 2, 9), (79, 3, 16), (84, 2, 11), (74, 2, 13), (97, 3, 37), (98, 2, 16), (95, 3, 42), (96, 2, 17), (101, 2, 18), (100, 2, 63), (94, 3, 54), (88, 2, 23), (89, 3, 60), (38, 2, 24), (46, 3, 38), (61, 3, 39), (66, 2, 25), (65, 2, 26), (57, 3, 56), (51, 3, 55), (48, 3, 58), (55, 3, 52), (56, 3, 53), (54, 3, 40), ),
		((91, 3, 76), (68, 2, 1), (39, 3, 105), ),
		((77, 2, 64), (83, 2, 8), (78, 2, 9), (79, 3, 16), (84, 2, 11), (74, 2, 13), (97, 3, 37), (98, 2, 16), (95, 3, 42), (96, 2, 17), (101, 2, 18), (94, 3, 54), (88, 2, 23), (89, 3, 60), (38, 2, 24), (46, 3, 38), (61, 3, 39), (66, 2, 25), (65, 2, 26), (57, 3, 56), (51, 3, 55), (48, 3, 58), (55, 3, 52), (56, 3, 53), (54, 3, 40), ),
		((91, 3, 76), (68, 2, 1), (39, 3, 79), ),
		((82, 3, 7), (40, 2, 31), ),
		((83, 3, 6), (78, 2, 9), (79, 3, 16), (84, 2, 11), (74, 2, 13), (97, 3, 37), (98, 2, 16), (95, 3, 42), (96, 2, 17), (101, 2, 18), (94, 3, 54), (88, 2, 23), (89, 3, 60), (38, 2, 24), (46, 3, 38), (61, 3, 39), (66, 2, 25), (65, 2, 26), (57, 3, 56), (51, 3, 55), (48, 3, 58), (55, 3, 52), (56, 3, 53), (54, 3, 40), ),
		((91, 3, 76), (68, 2, 1), (39, 3, 80), ),
		((80, 3, 12), (37, 2, 34), ),
		((78, 3, 11), (79, 3, 16), (84, 2, 11), (74, 2, 13), (97, 3, 37), (98, 2, 16), (95, 3, 42), (96, 2, 17), (101, 2, 18), (94, 3, 54), (88, 2, 23), (89, 3, 60), (38, 2, 24), (46, 3, 38), (61, 3, 39), (66, 2, 25), (65, 2, 26), (57, 3, 56), (51, 3, 55), (48, 3, 58), (55, 3, 52), (56, 3, 53), (54, 3, 40), ),
		((91, 3, 76), (68, 2, 1), (39, 3, 82), ),
		((91, 3, 76), (68, 2, 1), (39, 3, 83), ),
		((91, 3, 76), (68, 2, 1), (39, 3, 84), ),
		((91, 3, 76), (68, 2, 1), (39, 3, 85), ),
		((91, 3, 76), (68, 2, 1), (39, 3, 86), ),
		((91, 3, 76), (68, 2, 1), (39, 3, 87), ),
		((91, 3, 76), (68, 2, 1), (39, 3, 88), ),
		((91, 3, 76), (68, 2, 1), (39, 3, 89), ),
		((84, 2, 65), (74, 2, 13), (97, 3, 37), (98, 2, 16), (95, 3, 42), (96, 2, 17), (101, 2, 18), (94, 3, 54), (88, 2, 23), (89, 3, 60), (46, 3, 38), (61, 3, 39), (66, 2, 25), (65, 2, 26), (57, 3, 56), (51, 3, 55), (48, 3, 58), (55, 3, 52), (56, 3, 53), (54, 3, 40), ),
		((75, 2, 43), (76, 3, 28), (38, 2, 45), (41, 3, 18), (44, 3, 19), (45, 3, 20), (42, 3, 21), (43, 3, 22), (35, 3, 23), (36, 3, 24), (34, 3, 25), ),
		((34, 3, 26), ),
		((74, 2, 66), (97, 3, 37), (98, 2, 16), (95, 3, 42), (96, 2, 17), (101, 2, 18), (94, 3, 54), (88, 2, 23), (89, 3, 60), (46, 3, 38), (61, 3, 39), (66, 2, 25), (65, 2, 26), (57, 3, 56), (51, 3, 55), (48, 3, 58), (55, 3, 52), (56, 3, 53), (54, 3, 40), ),
		((74, 2, 67), (97, 3, 37), (98, 2, 16), (95, 3, 42), (96, 2, 17), (101, 2, 18), (94, 3, 54), (88, 2, 23), (89, 3, 60), (46, 3, 38), (61, 3, 39), (66, 2, 25), (65, 2, 26), (57, 3, 56), (51, 3, 55), (48, 3, 58), (55, 3, 52), (56, 3, 53), (54, 3, 40), ),
		((91, 3, 76), (68, 2, 1), (39, 3, 92), ),
		((91, 3, 76), (68, 2, 1), (39, 3, 93), ),
		((91, 3, 76), (68, 2, 1), (39, 3, 94), ),
		((97, 3, 34), (98, 2, 16), (95, 3, 42), (96, 2, 17), (101, 2, 18), (94, 3, 54), (88, 2, 23), (89, 3, 60), (46, 3, 38), (61, 3, 39), (66, 2, 25), (65, 2, 26), (57, 3, 56), (51, 3, 55), (48, 3, 58), (55, 3, 52), (56, 3, 53), (54, 3, 40), ),
		((97, 3, 35), (98, 2, 16), (95, 3, 42), (96, 2, 17), (101, 2, 18), (94, 3, 54), (88, 2, 23), (89, 3, 60), (46, 3, 38), (61, 3, 39), (66, 2, 25), (65, 2, 26), (57, 3, 56), (51, 3, 55), (48, 3, 58), (55, 3, 52), (56, 3, 53), (54, 3, 40), ),
		((97, 3, 36), (98, 2, 16), (95, 3, 42), (96, 2, 17), (101, 2, 18), (94, 3, 54), (88, 2, 23), (89, 3, 60), (46, 3, 38), (61, 3, 39), (66, 2, 25), (65, 2, 26), (57, 3, 56), (51, 3, 55), (48, 3, 58), (55, 3, 52), (56, 3, 53), (54, 3, 40), ),
		((91, 3, 76), (68, 2, 1), (39, 3, 95), ),
		((97, 3, 43), (98, 2, 16), (95, 3, 42), (96, 2, 17), (101, 2, 18), (94, 3, 54), (88, 2, 23), (89, 3, 60), (46, 3, 38), (61, 3, 39), (66, 2, 25), (65, 2, 26), (57, 3, 56), (51, 3, 55), (48, 3, 58), (55, 3, 52), (56, 3, 53), (54, 3, 40), ),
		((102, 3, 46), (66, 2, 58), (65, 2, 59), (64, 2, 60), ),
		((91, 3, 76), (68, 2, 1), (39, 3, 100), ),
		((69, 2, 68), (72, 3, 1), (71, 3, 2), (77, 2, 7), (83, 2, 8), (78, 2, 9), (79, 3, 16), (84, 2, 11), (74, 2, 13), (97, 3, 37), (98, 2, 16), (95, 3, 42), (96, 2, 17), (101, 2, 18), (100, 2, 69), (94, 3, 54), (88, 2, 23), (89, 3, 60), (38, 2, 24), (46, 3, 38), (61, 3, 39), (66, 2, 25), (65, 2, 26), (57, 3, 56), (51, 3, 55), (48, 3, 58), (55, 3, 52), (56, 3, 53), (54, 3, 40), ),
		((69, 2, 70), (72, 3, 1), (71, 3, 2), (77, 2, 7), (83, 2, 8), (78, 2, 9), (79, 3, 16), (84, 2, 11), (74, 2, 13), (97, 3, 37), (98, 2, 16), (95, 3, 42), (96, 2, 17), (101, 2, 18), (94, 3, 54), (88, 2, 23), (89, 3, 60), (38, 2, 24), (46, 3, 38), (61, 3, 39), (66, 2, 25), (65, 2, 26), (57, 3, 56), (51, 3, 55), (48, 3, 58), (55, 3, 52), (56, 3, 53), (54, 3, 40), ),
		((57, 3, 51), ),
		((67, 3, 62), ),
		((92, 3, 70), (93, 2, 74), (90, 3, 67), (50, 2, 75), (49, 2, 76), ),
		((63, 3, 61), ),
		((52, 2, 79), ),
		((46, 2, 46), (61, 2, 47), ),
		((62, 2, 51), (60, 2, 52), (58, 2, 53), ),
		((62, 2, 51), (60, 2, 52), (58, 2, 53), ),
		((92, 3, 70), (93, 2, 74), (90, 3, 67), (50, 2, 75), ),
		((67, 3, 49), ),
		((63, 3, 50), ),
		((91, 3, 76), (68, 2, 1), (39, 3, 97), ),
		((91, 3, 76), (68, 2, 1), (39, 3, 104), ),
		((91, 3, 76), (68, 2, 1), (39, 3, 102), ),
		((92, 3, 69), (50, 2, 75), ),
		((69, 3, 68), (72, 3, 1), (71, 3, 2), (77, 2, 7), (83, 2, 8), (78, 2, 9), (79, 3, 16), (84, 2, 11), (74, 2, 13), (97, 3, 37), (98, 2, 16), (95, 3, 42), (96, 2, 17), (101, 2, 18), (94, 3, 54), (88, 2, 23), (89, 3, 60), (38, 2, 24), (46, 3, 38), (61, 3, 39), (66, 2, 25), (65, 2, 26), (57, 3, 56), (51, 3, 55), (48, 3, 58), (55, 3, 52), (56, 3, 53), (54, 3, 40), ),
		((57, 2, 80), ),
		((91, 3, 76), (68, 2, 1), (39, 3, 99), ),
		((91, 3, 76), (68, 2, 1), (39, 3, 110), ),
		((72, 3, 4), (71, 3, 2), (77, 2, 7), (83, 2, 8), (78, 2, 9), (79, 3, 16), (84, 2, 11), (74, 2, 13), (97, 3, 37), (98, 2, 16), (95, 3, 42), (96, 2, 17), (101, 2, 18), (94, 3, 54), (88, 2, 23), (89, 3, 60), (38, 2, 24), (46, 3, 38), (61, 3, 39), (66, 2, 25), (65, 2, 26), (57, 3, 56), (51, 3, 55), (48, 3, 58), (55, 3, 52), (56, 3, 53), (54, 3, 40), ),
		((34, 2, 81), ),
		((69, 2, 82), (72, 3, 1), (71, 3, 2), (77, 2, 7), (83, 2, 8), (78, 2, 9), (79, 3, 16), (84, 2, 11), (74, 2, 13), (97, 3, 37), (98, 2, 16), (95, 3, 42), (96, 2, 17), (101, 2, 18), (94, 3, 54), (88, 2, 23), (89, 3, 60), (38, 2, 24), (46, 3, 38), (61, 3, 39), (66, 2, 25), (65, 2, 26), (57, 3, 56), (51, 3, 55), (48, 3, 58), (55, 3, 52), (56, 3, 53), (54, 3, 40), ),
		((86, 3, 65), (87, 2, 83), (47, 2, 84), ),
		((63, 3, 63), ),
		((69, 3, 64), (72, 3, 1), (71, 3, 2), (77, 2, 7), (83, 2, 8), (78, 2, 9), (79, 3, 16), (84, 2, 11), (74, 2, 13), (97, 3, 37), (98, 2, 16), (95, 3, 42), (96, 2, 17), (101, 2, 18), (94, 3, 54), (88, 2, 23), (89, 3, 60), (38, 2, 24), (46, 3, 38), (61, 3, 39), (66, 2, 25), (65, 2, 26), (57, 3, 56), (51, 3, 55), (48, 3, 58), (55, 3, 52), (56, 3, 53), (54, 3, 40), )
	)

	_def_prod = (78, 77, -1, 78, 78, 78, -1, 3, 9, 14, 78, 30, 78, 33, 78, 78, -1, 44, 48, 78, 78, 78, 78, 59, -1, -1, 73, 78, -1, 78, 5, -1, 78, 10, -1, 78, 78, 78, 78, 78, 78, 78, 78, -1, 17, -1, -1, -1, 78, 78, 78, -1, -1, -1, 78, -1, 45, 78, 73, -1, -1, -1, 72, -1, -1, 27, 31, 32, 72, -1, -1, 78, 78, 78, 71, -1, -1, 78, 78, -1, -1, -1, 66, -1, -1)

	# Lexical analysis
	_dfa_select = (0, 1, 2, 3, 4, 3, -1, 5, 6, 7, 8, 9, 10, 11, 10, 10, 12, 13, 14, 15, 16, 3, 3, 17, 2, 2, 18, 0, 2, 0, 6, 2, 0, 7, 2, 10, 10, 10, 10, 10, 10, 10, 0, 12, 19, 20, 12, 12, 10, 10, 10, 12, 12, 12, 10, 12, 14, 21, 22, 2, 23, 24, 25, 26, 27, 9, 11, 11, 28, 24, 26, 3, 21, 0, 29, 2, 23, 3, 0, 2, 20, 2, 30, 26, 2)
	_dfa_index = (
		(0, 23, 24, 25, 26, 29, 35, 36, 37, 41, 42, 47, 52, 57, 63, 65, 72, 73, 79, 83, 90, 96, 102, 107, 109, 116, 122, 129, 135, 142, 149, 156),
		(163, 203, 204, 205, 206, 208, 209, 210, 211, 213, 214, 217, 220, 222, 228, 229, 230, 231, 235, 236, 237, 238, 239, 240, 241, 242, 247, 252, 257, 262, 267, 272, 277, 282, 287, 289, 291, 298, 299, 305, 311, 318, 324, 328, 335, 341, 348, 350, 359, 365, 372, 378, 385, 390, 397, 404, 411, 418, 425, 432, 439, 446, 453),
		(460, 479, 480, 481, 482, 485, 491, 492, 493, 494, 499, 504, 509, 515, 517, 524, 530, 536, 543, 549, 551, 556, 562, 569, 575, 582, 589, 596, 603),
		(610, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 649, 651, 652, 653, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 677, 679, 681, 683, 685, 688, 690, 692, 694, 696, 698, 700),
		(702, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 743, 745, 746, 747, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 774, 780, 786, 790, 796, 798, 800, 802, 804, 807, 809, 815, 821, 823, 825, 827, 829, 831),
		(833, 839, 840, 841, 842, 843, 844, 846, 848),
		(850, 858, 859, 860, 861, 862, 863, 864, 865, 867, 869, 871, 873, 875, 877),
		(879, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 900, 902, 904, 906, 908, 910, 912),
		(914, 939, 940, 941, 942, 945, 951, 952, 953, 957, 958, 963, 968, 973, 978, 984, 986, 993, 994, 1000, 1004, 1011, 1017, 1023, 1030, 1032, 1037, 1043, 1050, 1056, 1063, 1070, 1077, 1084),
		(1091, 1107, 1108, 1109, 1110, 1111, 1114, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1131, 1133, 1135, 1137, 1139, 1142, 1144, 1146, 1148, 1150, 1152, 1154),
		(1156, 1177, 1178, 1179, 1180, 1183, 1189, 1190, 1191, 1195, 1196, 1201, 1206, 1212, 1214, 1221, 1222, 1228, 1232, 1237, 1243, 1249, 1256, 1258, 1265, 1271, 1278, 1284, 1291),
		(1298, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1327, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1344, 1346, 1348, 1350, 1352, 1355, 1357, 1359, 1361, 1363, 1365, 1367),
		(1369, 1386, 1387, 1388, 1389, 1392, 1398, 1399, 1400, 1401, 1406, 1411, 1417, 1419, 1426, 1432, 1438, 1443, 1449, 1451, 1458, 1464, 1471, 1477, 1484, 1491),
		(1498, 1517, 1518, 1519, 1521, 1522, 1523, 1524, 1525, 1528, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1546, 1548, 1550, 1552, 1554, 1557, 1559, 1561, 1563, 1565, 1567, 1569),
		(1571, 1593, 1594, 1595, 1596, 1598, 1599, 1600, 1601, 1602, 1603, 1606, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1625, 1627, 1629, 1631, 1633, 1636, 1638, 1640, 1642, 1644, 1646, 1648),
		(1650, 1674, 1675, 1676, 1677, 1678, 1681, 1687, 1688, 1689, 1693, 1694, 1699, 1704, 1709, 1715, 1717, 1724, 1725, 1731, 1735, 1742, 1748, 1754, 1759, 1761, 1768, 1774, 1781, 1787, 1794, 1801, 1808),
		(1815, 1839, 1840, 1841, 1842, 1845, 1851, 1852, 1853, 1854, 1858, 1859, 1864, 1869, 1874, 1880, 1882, 1889, 1890, 1896, 1900, 1907, 1913, 1919, 1924, 1926, 1933, 1939, 1946, 1952, 1959, 1966, 1973),
		(1980, 2004, 2005, 2006, 2007, 2009, 2010, 2011, 2012, 2013, 2014, 2017, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2037, 2043, 2049, 2055, 2061, 2063, 2065, 2067, 2069, 2072, 2074, 2080, 2086, 2088, 2090, 2092, 2094, 2096),
		(2098, 2118, 2119, 2120, 2121, 2124, 2130, 2131, 2132, 2133, 2134, 2139, 2144, 2149, 2155, 2157, 2164, 2170, 2176, 2183, 2189, 2191, 2196, 2202, 2209, 2215, 2222, 2229, 2236, 2243),
		(2250, 2264, 2265, 2266, 2269, 2271, 2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279, 2280, 2281, 2282, 2283, 2284, 2286, 2288, 2290, 2292, 2294, 2297, 2299, 2301, 2303, 2305, 2307, 2309),
		(2311, 2313, 2314),
		(2316, 2324, 2328, 2333, 2337),
		(2338, 2358, 2359, 2360, 2361, 2362, 2365, 2371, 2372, 2373, 2374, 2379, 2384, 2389, 2395, 2397, 2404, 2410, 2416, 2423, 2429, 2431, 2436, 2442, 2449, 2455, 2462, 2469, 2476, 2483),
		(2490, 2494),
		(2499, 2501),
		(2502, 2506, 2507, 2508, 2509, 2511),
		(2513, 2515),
		(2516, 2518, 2519, 2521, 2523),
		(2525, 2528, 2529),
		(2530, 2534, 2535, 2536),
		(2537, 2540, 2541, 2542),
	)
	_dfa_chars = ((34, 34), (35, 35), (39, 39), (40, 40), (43, 43), (45, 45), (46, 46), (48, 57), (70, 70), (84, 84), (91, 91), (110, 110), (126, 126), (9, 10), (13, 13), (32, 32), (65, 69), (71, 83), (85, 90), (95, 95), (97, 109), (111, 122), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (46, 46), (48, 57), (-1, -1), (97, 97), (48, 57), (65, 90), (95, 95), (98, 122), (-1, -1), (-1, -1), (-1, -1), (9, 10), (13, 13), (32, 32), (-1, -1), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (48, 57), (-1, -1), (114, 114), (48, 57), (65, 90), (95, 95), (97, 113), (115, 122), (-1, -1), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (10, 10), (0, 9), (11, 65535), (-1, -1), (111, 111), (48, 57), (65, 90), (95, 95), (97, 110), (112, 122), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (48, 57), (-1, -1), (108, 108), (48, 57), (65, 90), (95, 95), (97, 107), (109, 122), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (117, 117), (48, 57), (65, 90), (95, 95), (97, 116), (118, 122), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (116, 116), (48, 57), (65, 90), (95, 95), (97, 115), (117, 122), (-1, -1), (115, 115), (48, 57), (65, 90), (95, 95), (97, 114), (116, 122), (-1, -1), (101, 101), (48, 57), (65, 90), (95, 95), (97, 100), (102, 122), (-1, -1), (101, 101), (48, 57), (65, 90), (95, 95), (97, 100), (102, 122), (-1, -1), (33, 33), (34, 34), (35, 35), (37, 37), (39, 39), (40, 40), (41, 41), (42, 42), (43, 43), (44, 44), (45, 45), (46, 46), (47, 47), (48, 57), (60, 60), (61, 61), (62, 62), (70, 70), (84, 84), (91, 91), (93, 93), (97, 97), (101, 101), (102, 102), (105, 105), (110, 110), (111, 111), (126, 126), (9, 10), (13, 13), (32, 32), (65, 69), (71, 83), (85, 90), (95, 95), (98, 100), (103, 104), (106, 109), (112, 122), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (42, 42), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (48, 57), (-1, -1), (-1, -1), (46, 46), (48, 57), (-1, -1), (61, 61), (62, 62), (-1, -1), (61, 61), (-1, -1), (97, 97), (48, 57), (65, 90), (95, 95), (98, 122), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (9, 10), (13, 13), (32, 32), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (61, 61), (-1, -1), (48, 57), (-1, -1), (114, 114), (48, 57), (65, 90), (95, 95), (97, 113), (115, 122), (-1, -1), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (110, 110), (48, 57), (65, 90), (95, 95), (97, 109), (111, 122), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (10, 10), (0, 9), (11, 65535), (-1, -1), (108, 108), (48, 57), (65, 90), (95, 95), (97, 107), (109, 122), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (111, 111), (48, 57), (65, 90), (95, 95), (97, 110), (112, 122), (-1, -1), (61, 61), (-1, -1), (102, 102), (110, 110), (48, 57), (65, 90), (95, 95), (97, 101), (103, 109), (111, 122), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (111, 111), (48, 57), (65, 90), (95, 95), (97, 110), (112, 122), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (114, 114), (48, 57), (65, 90), (95, 95), (97, 113), (115, 122), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (117, 117), (48, 57), (65, 90), (95, 95), (97, 116), (118, 122), (-1, -1), (100, 100), (48, 57), (65, 90), (95, 95), (97, 99), (101, 122), (-1, -1), (115, 115), (48, 57), (65, 90), (95, 95), (97, 114), (116, 122), (-1, -1), (116, 116), (48, 57), (65, 90), (95, 95), (97, 115), (117, 122), (-1, -1), (101, 101), (48, 57), (65, 90), (95, 95), (97, 100), (102, 122), (-1, -1), (101, 101), (48, 57), (65, 90), (95, 95), (97, 100), (102, 122), (-1, -1), (101, 101), (48, 57), (65, 90), (95, 95), (97, 100), (102, 122), (-1, -1), (114, 114), (48, 57), (65, 90), (95, 95), (97, 113), (115, 122), (-1, -1), (115, 115), (48, 57), (65, 90), (95, 95), (97, 114), (116, 122), (-1, -1), (108, 108), (48, 57), (65, 90), (95, 95), (97, 107), (109, 122), (-1, -1), (34, 34), (39, 39), (40, 40), (43, 43), (45, 45), (46, 46), (48, 57), (70, 70), (84, 84), (91, 91), (110, 110), (126, 126), (65, 69), (71, 83), (85, 90), (95, 95), (97, 109), (111, 122), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (46, 46), (48, 57), (-1, -1), (97, 97), (48, 57), (65, 90), (95, 95), (98, 122), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (48, 57), (-1, -1), (114, 114), (48, 57), (65, 90), (95, 95), (97, 113), (115, 122), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (111, 111), (48, 57), (65, 90), (95, 95), (97, 110), (112, 122), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (48, 57), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (108, 108), (48, 57), (65, 90), (95, 95), (97, 107), (109, 122), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (117, 117), (48, 57), (65, 90), (95, 95), (97, 116), (118, 122), (-1, -1), (116, 116), (48, 57), (65, 90), (95, 95), (97, 115), (117, 122), (-1, -1), (115, 115), (48, 57), (65, 90), (95, 95), (97, 114), (116, 122), (-1, -1), (101, 101), (48, 57), (65, 90), (95, 95), (97, 100), (102, 122), (-1, -1), (101, 101), (48, 57), (65, 90), (95, 95), (97, 100), (102, 122), (-1, -1), (33, 33), (35, 35), (37, 37), (40, 40), (41, 41), (42, 42), (43, 43), (44, 44), (45, 45), (46, 46), (47, 47), (60, 60), (61, 61), (62, 62), (91, 91), (93, 93), (97, 97), (101, 101), (102, 102), (105, 105), (110, 110), (111, 111), (9, 10), (13, 13), (32, 32), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (42, 42), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (61, 61), (62, 62), (-1, -1), (61, 61), (-1, -1), (-1, -1), (-1, -1), (9, 10), (13, 13), (32, 32), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (61, 61), (-1, -1), (-1, -1), (10, 10), (0, 9), (11, 65535), (-1, -1), (61, 61), (-1, -1), (110, 110), (-1, -1), (108, 108), (-1, -1), (111, 111), (-1, -1), (102, 102), (110, 110), (-1, -1), (114, 114), (-1, -1), (100, 100), (-1, -1), (115, 115), (-1, -1), (114, 114), (-1, -1), (116, 116), (-1, -1), (101, 101), (-1, -1), (111, 111), (-1, -1), (33, 33), (34, 34), (35, 35), (37, 37), (39, 39), (40, 40), (41, 41), (42, 42), (43, 43), (44, 44), (45, 45), (46, 46), (47, 47), (60, 60), (61, 61), (62, 62), (91, 91), (93, 93), (97, 97), (101, 101), (102, 102), (105, 105), (110, 110), (111, 111), (9, 10), (13, 13), (32, 32), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (42, 42), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (61, 61), (62, 62), (-1, -1), (61, 61), (-1, -1), (-1, -1), (-1, -1), (9, 10), (13, 13), (32, 32), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (61, 61), (-1, -1), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (10, 10), (0, 9), (11, 65535), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (61, 61), (-1, -1), (110, 110), (-1, -1), (108, 108), (-1, -1), (111, 111), (-1, -1), (102, 102), (110, 110), (-1, -1), (114, 114), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (100, 100), (-1, -1), (115, 115), (-1, -1), (114, 114), (-1, -1), (116, 116), (-1, -1), (101, 101), (-1, -1), (111, 111), (-1, -1), (41, 41), (44, 44), (93, 93), (102, 102), (105, 105), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (111, 111), (-1, -1), (102, 102), (-1, -1), (114, 114), (-1, -1), (41, 41), (44, 44), (93, 93), (101, 101), (102, 102), (105, 105), (111, 111), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (108, 108), (-1, -1), (111, 111), (-1, -1), (102, 102), (-1, -1), (114, 114), (-1, -1), (115, 115), (-1, -1), (114, 114), (-1, -1), (101, 101), (-1, -1), (41, 41), (44, 44), (93, 93), (97, 97), (101, 101), (102, 102), (105, 105), (111, 111), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (110, 110), (-1, -1), (108, 108), (-1, -1), (111, 111), (-1, -1), (102, 102), (-1, -1), (114, 114), (-1, -1), (100, 100), (-1, -1), (115, 115), (-1, -1), (114, 114), (-1, -1), (101, 101), (-1, -1), (34, 34), (35, 35), (39, 39), (40, 40), (43, 43), (45, 45), (46, 46), (48, 57), (70, 70), (84, 84), (91, 91), (105, 105), (110, 110), (126, 126), (9, 10), (13, 13), (32, 32), (65, 69), (71, 83), (85, 90), (95, 95), (97, 104), (106, 109), (111, 122), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (46, 46), (48, 57), (-1, -1), (97, 97), (48, 57), (65, 90), (95, 95), (98, 122), (-1, -1), (-1, -1), (-1, -1), (9, 10), (13, 13), (32, 32), (-1, -1), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (48, 57), (-1, -1), (114, 114), (48, 57), (65, 90), (95, 95), (97, 113), (115, 122), (-1, -1), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (10, 10), (0, 9), (11, 65535), (-1, -1), (110, 110), (48, 57), (65, 90), (95, 95), (97, 109), (111, 122), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (111, 111), (48, 57), (65, 90), (95, 95), (97, 110), (112, 122), (-1, -1), (48, 57), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (108, 108), (48, 57), (65, 90), (95, 95), (97, 107), (109, 122), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (117, 117), (48, 57), (65, 90), (95, 95), (97, 116), (118, 122), (-1, -1), (116, 116), (48, 57), (65, 90), (95, 95), (97, 115), (117, 122), (-1, -1), (115, 115), (48, 57), (65, 90), (95, 95), (97, 114), (116, 122), (-1, -1), (101, 101), (48, 57), (65, 90), (95, 95), (97, 100), (102, 122), (-1, -1), (101, 101), (48, 57), (65, 90), (95, 95), (97, 100), (102, 122), (-1, -1), (33, 33), (41, 41), (43, 43), (44, 44), (45, 45), (60, 60), (61, 61), (62, 62), (93, 93), (97, 97), (101, 101), (102, 102), (105, 105), (110, 110), (111, 111), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (61, 61), (62, 62), (-1, -1), (61, 61), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (61, 61), (-1, -1), (61, 61), (-1, -1), (110, 110), (-1, -1), (108, 108), (-1, -1), (111, 111), (-1, -1), (102, 102), (110, 110), (-1, -1), (114, 114), (-1, -1), (100, 100), (-1, -1), (115, 115), (-1, -1), (114, 114), (-1, -1), (116, 116), (-1, -1), (101, 101), (-1, -1), (111, 111), (-1, -1), (34, 34), (35, 35), (39, 39), (40, 40), (43, 43), (45, 45), (46, 46), (48, 57), (70, 70), (84, 84), (91, 91), (126, 126), (9, 10), (13, 13), (32, 32), (65, 69), (71, 83), (85, 90), (95, 95), (97, 122), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (46, 46), (48, 57), (-1, -1), (97, 97), (48, 57), (65, 90), (95, 95), (98, 122), (-1, -1), (-1, -1), (-1, -1), (9, 10), (13, 13), (32, 32), (-1, -1), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (48, 57), (-1, -1), (114, 114), (48, 57), (65, 90), (95, 95), (97, 113), (115, 122), (-1, -1), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (10, 10), (0, 9), (11, 65535), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (108, 108), (48, 57), (65, 90), (95, 95), (97, 107), (109, 122), (-1, -1), (48, 57), (-1, -1), (117, 117), (48, 57), (65, 90), (95, 95), (97, 116), (118, 122), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (115, 115), (48, 57), (65, 90), (95, 95), (97, 114), (116, 122), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (101, 101), (48, 57), (65, 90), (95, 95), (97, 100), (102, 122), (-1, -1), (101, 101), (48, 57), (65, 90), (95, 95), (97, 100), (102, 122), (-1, -1), (33, 33), (37, 37), (41, 41), (42, 42), (43, 43), (44, 44), (45, 45), (47, 47), (60, 60), (61, 61), (62, 62), (93, 93), (97, 97), (101, 101), (102, 102), (105, 105), (110, 110), (111, 111), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (61, 61), (62, 62), (-1, -1), (61, 61), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (61, 61), (-1, -1), (61, 61), (-1, -1), (110, 110), (-1, -1), (108, 108), (-1, -1), (111, 111), (-1, -1), (102, 102), (110, 110), (-1, -1), (114, 114), (-1, -1), (100, 100), (-1, -1), (115, 115), (-1, -1), (114, 114), (-1, -1), (116, 116), (-1, -1), (101, 101), (-1, -1), (111, 111), (-1, -1), (34, 34), (39, 39), (40, 40), (43, 43), (45, 45), (46, 46), (48, 57), (70, 70), (84, 84), (91, 91), (126, 126), (65, 69), (71, 83), (85, 90), (95, 95), (97, 122), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (46, 46), (48, 57), (-1, -1), (97, 97), (48, 57), (65, 90), (95, 95), (98, 122), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (48, 57), (-1, -1), (114, 114), (48, 57), (65, 90), (95, 95), (97, 113), (115, 122), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (48, 57), (-1, -1), (108, 108), (48, 57), (65, 90), (95, 95), (97, 107), (109, 122), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (117, 117), (48, 57), (65, 90), (95, 95), (97, 116), (118, 122), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (115, 115), (48, 57), (65, 90), (95, 95), (97, 114), (116, 122), (-1, -1), (101, 101), (48, 57), (65, 90), (95, 95), (97, 100), (102, 122), (-1, -1), (101, 101), (48, 57), (65, 90), (95, 95), (97, 100), (102, 122), (-1, -1), (33, 33), (37, 37), (41, 41), (42, 42), (43, 43), (44, 44), (45, 45), (47, 47), (60, 60), (61, 61), (62, 62), (93, 93), (97, 97), (101, 101), (102, 102), (105, 105), (110, 110), (111, 111), (-1, -1), (-1, -1), (-1, -1), (42, 42), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (61, 61), (62, 62), (-1, -1), (61, 61), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (61, 61), (-1, -1), (61, 61), (-1, -1), (110, 110), (-1, -1), (108, 108), (-1, -1), (111, 111), (-1, -1), (102, 102), (110, 110), (-1, -1), (114, 114), (-1, -1), (100, 100), (-1, -1), (115, 115), (-1, -1), (114, 114), (-1, -1), (116, 116), (-1, -1), (101, 101), (-1, -1), (111, 111), (-1, -1), (33, 33), (37, 37), (40, 40), (41, 41), (42, 42), (43, 43), (44, 44), (45, 45), (46, 46), (47, 47), (60, 60), (61, 61), (62, 62), (91, 91), (93, 93), (97, 97), (101, 101), (102, 102), (105, 105), (110, 110), (111, 111), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (42, 42), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (61, 61), (62, 62), (-1, -1), (61, 61), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (61, 61), (-1, -1), (61, 61), (-1, -1), (110, 110), (-1, -1), (108, 108), (-1, -1), (111, 111), (-1, -1), (102, 102), (110, 110), (-1, -1), (114, 114), (-1, -1), (100, 100), (-1, -1), (115, 115), (-1, -1), (114, 114), (-1, -1), (116, 116), (-1, -1), (101, 101), (-1, -1), (111, 111), (-1, -1), (34, 34), (35, 35), (39, 39), (40, 40), (41, 41), (43, 43), (45, 45), (46, 46), (48, 57), (70, 70), (84, 84), (91, 91), (110, 110), (126, 126), (9, 10), (13, 13), (32, 32), (65, 69), (71, 83), (85, 90), (95, 95), (97, 109), (111, 122), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (46, 46), (48, 57), (-1, -1), (97, 97), (48, 57), (65, 90), (95, 95), (98, 122), (-1, -1), (-1, -1), (-1, -1), (9, 10), (13, 13), (32, 32), (-1, -1), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (48, 57), (-1, -1), (114, 114), (48, 57), (65, 90), (95, 95), (97, 113), (115, 122), (-1, -1), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (10, 10), (0, 9), (11, 65535), (-1, -1), (111, 111), (48, 57), (65, 90), (95, 95), (97, 110), (112, 122), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (48, 57), (-1, -1), (108, 108), (48, 57), (65, 90), (95, 95), (97, 107), (109, 122), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (117, 117), (48, 57), (65, 90), (95, 95), (97, 116), (118, 122), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (116, 116), (48, 57), (65, 90), (95, 95), (97, 115), (117, 122), (-1, -1), (115, 115), (48, 57), (65, 90), (95, 95), (97, 114), (116, 122), (-1, -1), (101, 101), (48, 57), (65, 90), (95, 95), (97, 100), (102, 122), (-1, -1), (101, 101), (48, 57), (65, 90), (95, 95), (97, 100), (102, 122), (-1, -1), (34, 34), (35, 35), (39, 39), (40, 40), (43, 43), (45, 45), (46, 46), (48, 57), (70, 70), (84, 84), (91, 91), (93, 93), (110, 110), (126, 126), (9, 10), (13, 13), (32, 32), (65, 69), (71, 83), (85, 90), (95, 95), (97, 109), (111, 122), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (46, 46), (48, 57), (-1, -1), (97, 97), (48, 57), (65, 90), (95, 95), (98, 122), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (9, 10), (13, 13), (32, 32), (-1, -1), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (48, 57), (-1, -1), (114, 114), (48, 57), (65, 90), (95, 95), (97, 113), (115, 122), (-1, -1), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (10, 10), (0, 9), (11, 65535), (-1, -1), (111, 111), (48, 57), (65, 90), (95, 95), (97, 110), (112, 122), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (48, 57), (-1, -1), (108, 108), (48, 57), (65, 90), (95, 95), (97, 107), (109, 122), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (117, 117), (48, 57), (65, 90), (95, 95), (97, 116), (118, 122), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (116, 116), (48, 57), (65, 90), (95, 95), (97, 115), (117, 122), (-1, -1), (115, 115), (48, 57), (65, 90), (95, 95), (97, 114), (116, 122), (-1, -1), (101, 101), (48, 57), (65, 90), (95, 95), (97, 100), (102, 122), (-1, -1), (101, 101), (48, 57), (65, 90), (95, 95), (97, 100), (102, 122), (-1, -1), (33, 33), (34, 34), (37, 37), (39, 39), (40, 40), (41, 41), (42, 42), (43, 43), (44, 44), (45, 45), (46, 46), (47, 47), (60, 60), (61, 61), (62, 62), (91, 91), (93, 93), (97, 97), (101, 101), (102, 102), (105, 105), (110, 110), (111, 111), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (42, 42), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (61, 61), (62, 62), (-1, -1), (61, 61), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (61, 61), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (61, 61), (-1, -1), (110, 110), (-1, -1), (108, 108), (-1, -1), (111, 111), (-1, -1), (102, 102), (110, 110), (-1, -1), (114, 114), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (100, 100), (-1, -1), (115, 115), (-1, -1), (114, 114), (-1, -1), (116, 116), (-1, -1), (101, 101), (-1, -1), (111, 111), (-1, -1), (34, 34), (39, 39), (40, 40), (43, 43), (45, 45), (46, 46), (48, 57), (70, 70), (84, 84), (91, 91), (93, 93), (110, 110), (126, 126), (65, 69), (71, 83), (85, 90), (95, 95), (97, 109), (111, 122), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (46, 46), (48, 57), (-1, -1), (97, 97), (48, 57), (65, 90), (95, 95), (98, 122), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (48, 57), (-1, -1), (114, 114), (48, 57), (65, 90), (95, 95), (97, 113), (115, 122), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (111, 111), (48, 57), (65, 90), (95, 95), (97, 110), (112, 122), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (48, 57), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (108, 108), (48, 57), (65, 90), (95, 95), (97, 107), (109, 122), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (117, 117), (48, 57), (65, 90), (95, 95), (97, 116), (118, 122), (-1, -1), (116, 116), (48, 57), (65, 90), (95, 95), (97, 115), (117, 122), (-1, -1), (115, 115), (48, 57), (65, 90), (95, 95), (97, 114), (116, 122), (-1, -1), (101, 101), (48, 57), (65, 90), (95, 95), (97, 100), (102, 122), (-1, -1), (101, 101), (48, 57), (65, 90), (95, 95), (97, 100), (102, 122), (-1, -1), (33, 33), (41, 41), (44, 44), (60, 60), (61, 61), (62, 62), (93, 93), (97, 97), (101, 101), (102, 102), (105, 105), (110, 110), (111, 111), (-1, -1), (-1, -1), (-1, -1), (61, 61), (62, 62), (-1, -1), (61, 61), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (61, 61), (-1, -1), (61, 61), (-1, -1), (110, 110), (-1, -1), (108, 108), (-1, -1), (111, 111), (-1, -1), (102, 102), (110, 110), (-1, -1), (114, 114), (-1, -1), (100, 100), (-1, -1), (115, 115), (-1, -1), (114, 114), (-1, -1), (116, 116), (-1, -1), (101, 101), (-1, -1), (111, 111), (-1, -1), (105, 105), (-1, -1), (-1, -1), (110, 110), (-1, -1), (35, 35), (9, 10), (13, 13), (32, 32), (65, 90), (95, 95), (97, 122), (-1, -1), (9, 10), (13, 13), (32, 32), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (10, 10), (0, 9), (11, 65535), (-1, -1), (-1, -1), (34, 34), (39, 39), (40, 40), (41, 41), (43, 43), (45, 45), (46, 46), (48, 57), (70, 70), (84, 84), (91, 91), (110, 110), (126, 126), (65, 69), (71, 83), (85, 90), (95, 95), (97, 109), (111, 122), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (46, 46), (48, 57), (-1, -1), (97, 97), (48, 57), (65, 90), (95, 95), (98, 122), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (48, 57), (-1, -1), (114, 114), (48, 57), (65, 90), (95, 95), (97, 113), (115, 122), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (111, 111), (48, 57), (65, 90), (95, 95), (97, 110), (112, 122), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (48, 57), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (108, 108), (48, 57), (65, 90), (95, 95), (97, 107), (109, 122), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (117, 117), (48, 57), (65, 90), (95, 95), (97, 116), (118, 122), (-1, -1), (116, 116), (48, 57), (65, 90), (95, 95), (97, 115), (117, 122), (-1, -1), (115, 115), (48, 57), (65, 90), (95, 95), (97, 114), (116, 122), (-1, -1), (101, 101), (48, 57), (65, 90), (95, 95), (97, 100), (102, 122), (-1, -1), (101, 101), (48, 57), (65, 90), (95, 95), (97, 100), (102, 122), (-1, -1), (65, 90), (95, 95), (97, 122), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (41, 41), (-1, -1), (-1, -1), (44, 44), (93, 93), (102, 102), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (111, 111), (-1, -1), (114, 114), (-1, -1), (93, 93), (-1, -1), (-1, -1), (101, 101), (-1, -1), (-1, -1), (108, 108), (-1, -1), (115, 115), (-1, -1), (101, 101), (-1, -1), (41, 41), (44, 44), (-1, -1), (-1, -1), (-1, -1), (41, 41), (44, 44), (93, 93), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (93, 93), (105, 105), (-1, -1), (-1, -1), (-1, -1), (102, 102), (-1, -1))
	_dfa_trans = (13, 18, 21, 1, 2, 3, 23, 4, 5, 15, 6, 19, 7, 8, 8, 8, 22, 22, 22, 22, 22, 22, -1, -1, -1, -1, 14, 4, -1, 24, 22, 22, 22, 22, -1, -1, -1, 8, 8, 8, -1, -1, 22, 22, 22, 22, -1, 22, 22, 22, 22, -1, 22, 22, 22, 22, -1, 9, 25, 13, 13, 13, -1, 14, -1, 26, 22, 22, 22, 22, 22, -1, -1, 9, 25, 13, 13, 13, -1, 16, 18, 18, -1, 28, 22, 22, 22, 22, 22, -1, 9, 27, 21, 21, 21, -1, 9, 27, 21, 21, 21, -1, 22, 22, 22, 22, -1, 14, -1, 29, 22, 22, 22, 22, 22, -1, 17, 25, 13, 13, 13, -1, 30, 22, 22, 22, 22, 22, -1, 20, 27, 21, 21, 21, -1, 10, 22, 22, 22, 22, 22, -1, 31, 22, 22, 22, 22, 22, -1, 11, 22, 22, 22, 22, 22, -1, 12, 22, 22, 22, 22, 22, -1, 34, 39, 42, 1, 44, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 46, 12, 13, 36, 14, 15, 40, 43, 45, 47, 49, 51, 16, 17, 17, 17, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, -1, -1, 20, -1, -1, -1, -1, 35, -1, -1, 35, 10, -1, 21, 22, -1, 24, -1, 62, 52, 52, 52, 52, -1, -1, -1, -1, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, 52, 52, 52, 52, -1, 52, 52, 52, 52, -1, 52, 52, 52, 52, -1, 52, 52, 52, 52, -1, 52, 52, 52, 52, -1, 52, 52, 52, 52, -1, 52, 52, 52, 52, -1, 52, 52, 52, 52, -1, 52, 52, 52, 52, -1, 18, -1, 35, -1, 53, 52, 52, 52, 52, 52, -1, -1, 19, 48, 39, 39, 39, -1, 19, 48, 39, 39, 39, -1, 54, 52, 52, 52, 52, 52, -1, 19, 50, 44, 44, 44, -1, 37, 42, 42, -1, 55, 52, 52, 52, 52, 52, -1, 19, 50, 44, 44, 44, -1, 60, 52, 52, 52, 52, 52, -1, 23, -1, 25, 26, 52, 52, 52, 52, 52, 52, -1, 38, 48, 39, 39, 39, -1, 56, 52, 52, 52, 52, 52, -1, 41, 50, 44, 44, 44, -1, 27, 52, 52, 52, 52, 52, -1, 52, 52, 52, 52, -1, 57, 52, 52, 52, 52, 52, -1, 28, 52, 52, 52, 52, 52, -1, 58, 52, 52, 52, 52, 52, -1, 30, 52, 52, 52, 52, 52, -1, 31, 52, 52, 52, 52, 52, -1, 32, 52, 52, 52, 52, 52, -1, 33, 52, 52, 52, 52, 52, -1, 29, 52, 52, 52, 52, 52, -1, 59, 52, 52, 52, 52, 52, -1, 61, 52, 52, 52, 52, 52, -1, 12, 16, 1, 2, 3, 19, 4, 5, 14, 6, 17, 7, 20, 20, 20, 20, 20, 20, -1, -1, -1, -1, 13, 4, -1, 22, 20, 20, 20, 20, -1, -1, -1, -1, 20, 20, 20, 20, -1, 20, 20, 20, 20, -1, 20, 20, 20, 20, -1, 8, 21, 12, 12, 12, -1, 13, -1, 24, 20, 20, 20, 20, 20, -1, 8, 21, 12, 12, 12, -1, 8, 23, 16, 16, 16, -1, 25, 20, 20, 20, 20, 20, -1, 8, 23, 16, 16, 16, -1, 13, -1, 20, 20, 20, 20, -1, 15, 21, 12, 12, 12, -1, 26, 20, 20, 20, 20, 20, -1, 18, 23, 16, 16, 16, -1, 27, 20, 20, 20, 20, 20, -1, 9, 20, 20, 20, 20, 20, -1, 28, 20, 20, 20, 20, 20, -1, 10, 20, 20, 20, 20, 20, -1, 11, 20, 20, 20, 20, 20, -1, 28, 30, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 31, 11, 12, 13, 32, 33, 34, 35, 42, 36, 14, 14, 14, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, 17, 18, -1, 20, -1, -1, -1, 14, 14, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, 29, 30, 30, -1, 19, -1, 37, -1, 38, -1, 39, -1, 21, 22, -1, 23, -1, 24, -1, 41, -1, 25, -1, 26, -1, 27, -1, 40, -1, 29, 32, 34, 1, 35, 2, 3, 4, 5, 6, 7, 8, 9, 10, 36, 11, 12, 13, 37, 38, 39, 40, 49, 41, 14, 14, 14, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, 18, 19, -1, 21, -1, -1, -1, 14, 14, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, 16, 42, 32, 32, 32, -1, 16, 42, 32, 32, 32, -1, 16, 43, 35, 35, 35, -1, 30, 34, 34, -1, 16, 43, 35, 35, 35, -1, 20, -1, 44, -1, 45, -1, 46, -1, 22, 23, -1, 24, -1, 31, 42, 32, 32, 32, -1, 33, 43, 35, 35, 35, -1, 25, -1, 48, -1, 26, -1, 27, -1, 28, -1, 47, -1, 1, 2, 3, 6, 7, -1, -1, -1, -1, -1, -1, 8, -1, 4, -1, 5, -1, 1, 2, 3, 8, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, 13, -1, 4, -1, 5, -1, 14, -1, 6, -1, 7, -1, 1, 2, 3, 9, 10, 11, 12, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, 15, -1, 16, -1, 4, -1, 5, -1, 6, -1, 17, -1, 7, -1, 8, -1, 14, 19, 22, 1, 2, 3, 24, 4, 5, 16, 6, 20, 23, 7, 8, 8, 8, 25, 25, 25, 25, 25, 25, 25, -1, -1, -1, -1, 15, 4, -1, 27, 25, 25, 25, 25, -1, -1, -1, 8, 8, 8, -1, -1, 25, 25, 25, 25, -1, 25, 25, 25, 25, -1, 25, 25, 25, 25, -1, 25, 25, 25, 25, -1, 9, 26, 14, 14, 14, -1, 15, -1, 29, 25, 25, 25, 25, 25, -1, -1, 9, 26, 14, 14, 14, -1, 17, 19, 19, -1, 10, 25, 25, 25, 25, 25, -1, 9, 28, 22, 22, 22, -1, 9, 28, 22, 22, 22, -1, 30, 25, 25, 25, 25, 25, -1, 15, -1, 25, 25, 25, 25, -1, 18, 26, 14, 14, 14, -1, 31, 25, 25, 25, 25, 25, -1, 21, 28, 22, 22, 22, -1, 32, 25, 25, 25, 25, 25, -1, 11, 25, 25, 25, 25, 25, -1, 33, 25, 25, 25, 25, 25, -1, 12, 25, 25, 25, 25, 25, -1, 13, 25, 25, 25, 25, 25, -1, 20, 1, 2, 3, 4, 5, 21, 6, 7, 22, 23, 24, 25, 32, 26, -1, -1, -1, -1, -1, 9, 10, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, 11, -1, 27, -1, 28, -1, 29, -1, 13, 14, -1, 15, -1, 16, -1, 31, -1, 17, -1, 18, -1, 19, -1, 30, -1, 12, 17, 20, 1, 2, 3, 22, 4, 5, 14, 6, 7, 8, 8, 8, 18, 18, 18, 18, 18, -1, -1, -1, -1, 13, 4, -1, 21, 18, 18, 18, 18, -1, -1, -1, 8, 8, 8, -1, -1, 18, 18, 18, 18, -1, 18, 18, 18, 18, -1, 9, 24, 12, 12, 12, -1, 13, -1, 23, 18, 18, 18, 18, 18, -1, -1, 9, 24, 12, 12, 12, -1, 15, 17, 17, -1, 18, 18, 18, 18, -1, 9, 26, 20, 20, 20, -1, 9, 26, 20, 20, 20, -1, 25, 18, 18, 18, 18, 18, -1, 13, -1, 27, 18, 18, 18, 18, 18, -1, 16, 24, 12, 12, 12, -1, 28, 18, 18, 18, 18, 18, -1, 19, 26, 20, 20, 20, -1, 10, 18, 18, 18, 18, 18, -1, 11, 18, 18, 18, 18, 18, -1, 23, 1, 2, 3, 4, 5, 6, 7, 8, 24, 9, 10, 25, 26, 27, 28, 35, 29, -1, -1, -1, -1, -1, -1, -1, -1, 12, 13, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, 14, -1, 30, -1, 31, -1, 32, -1, 16, 17, -1, 18, -1, 19, -1, 34, -1, 20, -1, 21, -1, 22, -1, 33, -1, 11, 15, 1, 2, 3, 18, 4, 5, 13, 6, 7, 16, 16, 16, 16, 16, -1, -1, -1, -1, 12, 4, -1, 19, 16, 16, 16, 16, -1, -1, -1, -1, 16, 16, 16, 16, -1, 16, 16, 16, 16, -1, 8, 20, 11, 11, 11, -1, 12, -1, 21, 16, 16, 16, 16, 16, -1, 8, 20, 11, 11, 11, -1, 8, 22, 15, 15, 15, -1, 16, 16, 16, 16, -1, 8, 22, 15, 15, 15, -1, 12, -1, 23, 16, 16, 16, 16, 16, -1, 14, 20, 11, 11, 11, -1, 24, 16, 16, 16, 16, 16, -1, 17, 22, 15, 15, 15, -1, 25, 16, 16, 16, 16, 16, -1, 9, 16, 16, 16, 16, 16, -1, 10, 16, 16, 16, 16, 16, -1, 24, 1, 2, 3, 4, 5, 6, 7, 8, 25, 9, 10, 26, 27, 28, 29, 36, 30, -1, -1, -1, 12, -1, -1, -1, -1, -1, 13, 14, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, 15, -1, 31, -1, 32, -1, 33, -1, 17, 18, -1, 19, -1, 20, -1, 35, -1, 21, -1, 22, -1, 23, -1, 34, -1, 27, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 28, 11, 12, 13, 29, 30, 31, 32, 39, 33, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, 16, 17, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, 18, -1, 34, -1, 35, -1, 36, -1, 20, 21, -1, 22, -1, 23, -1, 38, -1, 24, -1, 25, -1, 26, -1, 37, -1, 14, 19, 22, 1, 2, 3, 4, 24, 5, 6, 16, 7, 20, 8, 9, 9, 9, 23, 23, 23, 23, 23, 23, -1, -1, -1, -1, -1, 15, 5, -1, 25, 23, 23, 23, 23, -1, -1, -1, 9, 9, 9, -1, -1, 23, 23, 23, 23, -1, 23, 23, 23, 23, -1, 23, 23, 23, 23, -1, 10, 26, 14, 14, 14, -1, 15, -1, 27, 23, 23, 23, 23, 23, -1, -1, 10, 26, 14, 14, 14, -1, 17, 19, 19, -1, 29, 23, 23, 23, 23, 23, -1, 10, 28, 22, 22, 22, -1, 10, 28, 22, 22, 22, -1, 23, 23, 23, 23, -1, 15, -1, 30, 23, 23, 23, 23, 23, -1, 18, 26, 14, 14, 14, -1, 31, 23, 23, 23, 23, 23, -1, 21, 28, 22, 22, 22, -1, 11, 23, 23, 23, 23, 23, -1, 32, 23, 23, 23, 23, 23, -1, 12, 23, 23, 23, 23, 23, -1, 13, 23, 23, 23, 23, 23, -1, 14, 19, 22, 1, 2, 3, 24, 4, 5, 16, 6, 7, 20, 8, 9, 9, 9, 23, 23, 23, 23, 23, 23, -1, -1, -1, -1, 15, 4, -1, 25, 23, 23, 23, 23, -1, -1, -1, -1, 9, 9, 9, -1, -1, 23, 23, 23, 23, -1, 23, 23, 23, 23, -1, 23, 23, 23, 23, -1, 10, 26, 14, 14, 14, -1, 15, -1, 27, 23, 23, 23, 23, 23, -1, -1, 10, 26, 14, 14, 14, -1, 17, 19, 19, -1, 29, 23, 23, 23, 23, 23, -1, 10, 28, 22, 22, 22, -1, 10, 28, 22, 22, 22, -1, 23, 23, 23, 23, -1, 15, -1, 30, 23, 23, 23, 23, 23, -1, 18, 26, 14, 14, 14, -1, 31, 23, 23, 23, 23, 23, -1, 21, 28, 22, 22, 22, -1, 11, 23, 23, 23, 23, 23, -1, 32, 23, 23, 23, 23, 23, -1, 12, 23, 23, 23, 23, 23, -1, 13, 23, 23, 23, 23, 23, -1, 28, 30, 1, 32, 2, 3, 4, 5, 6, 7, 8, 9, 10, 33, 11, 12, 13, 34, 35, 36, 37, 46, 38, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, 17, 18, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, 15, 39, 30, 30, 30, -1, 15, 39, 30, 30, 30, -1, 15, 40, 32, 32, 32, -1, 15, 40, 32, 32, 32, -1, 19, -1, 41, -1, 42, -1, 43, -1, 21, 22, -1, 23, -1, 29, 39, 30, 30, 30, -1, 31, 40, 32, 32, 32, -1, 24, -1, 45, -1, 25, -1, 26, -1, 27, -1, 44, -1, 13, 17, 1, 2, 3, 20, 4, 5, 15, 6, 7, 18, 8, 21, 21, 21, 21, 21, 21, -1, -1, -1, -1, 14, 4, -1, 23, 21, 21, 21, 21, -1, -1, -1, -1, -1, 21, 21, 21, 21, -1, 21, 21, 21, 21, -1, 21, 21, 21, 21, -1, 9, 22, 13, 13, 13, -1, 14, -1, 25, 21, 21, 21, 21, 21, -1, 9, 22, 13, 13, 13, -1, 9, 24, 17, 17, 17, -1, 26, 21, 21, 21, 21, 21, -1, 9, 24, 17, 17, 17, -1, 14, -1, 21, 21, 21, 21, -1, 16, 22, 13, 13, 13, -1, 27, 21, 21, 21, 21, 21, -1, 19, 24, 17, 17, 17, -1, 28, 21, 21, 21, 21, 21, -1, 10, 21, 21, 21, 21, 21, -1, 29, 21, 21, 21, 21, 21, -1, 11, 21, 21, 21, 21, 21, -1, 12, 21, 21, 21, 21, 21, -1, 18, 1, 2, 3, 19, 4, 5, 20, 21, 22, 23, 30, 24, -1, -1, -1, 7, 8, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, 9, -1, 25, -1, 26, -1, 27, -1, 11, 12, -1, 13, -1, 14, -1, 29, -1, 15, -1, 16, -1, 17, -1, 28, -1, 2, -1, -1, 1, -1, 3, 1, 1, 1, 2, 2, 2, -1, 1, 1, 1, -1, 2, 2, 2, 2, -1, 4, 3, 3, -1, -1, 13, 17, 1, 2, 3, 4, 20, 5, 6, 15, 7, 18, 8, 21, 21, 21, 21, 21, 21, -1, -1, -1, -1, -1, 14, 5, -1, 23, 21, 21, 21, 21, -1, -1, -1, -1, 21, 21, 21, 21, -1, 21, 21, 21, 21, -1, 21, 21, 21, 21, -1, 9, 22, 13, 13, 13, -1, 14, -1, 25, 21, 21, 21, 21, 21, -1, 9, 22, 13, 13, 13, -1, 9, 24, 17, 17, 17, -1, 26, 21, 21, 21, 21, 21, -1, 9, 24, 17, 17, 17, -1, 14, -1, 21, 21, 21, 21, -1, 16, 22, 13, 13, 13, -1, 27, 21, 21, 21, 21, 21, -1, 19, 24, 17, 17, 17, -1, 28, 21, 21, 21, 21, 21, -1, 10, 21, 21, 21, 21, 21, -1, 29, 21, 21, 21, 21, 21, -1, 11, 21, 21, 21, 21, 21, -1, 12, 21, 21, 21, 21, 21, -1, 1, 1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, 1, 2, 4, -1, -1, -1, -1, 5, -1, 3, -1, 1, -1, -1, 2, -1, -1, 3, -1, 4, -1, 1, -1, 1, 2, -1, -1, -1, 1, 2, 3, -1, -1, -1, -1, 1, 3, -1, -1, -1, 2, -1)
	_dfa_accept = (
		(0, 33, 28, 26, 22, 20, 25, 30, 19, 21, 6, 11, 14, 0, 22, 20, 19, 21, 0, 20, 21, 0, 20, 0, 20, 0, 20, 0, 20, 20, 20, 20),
		(0, 31, 33, 27, 29, 28, 34, 26, 24, 32, 22, 10, 16, 20, 25, 23, 30, 19, 18, 21, 12, 2, 15, 9, 8, 4, 17, 3, 7, 13, 6, 11, 5, 14, 0, 22, 20, 19, 21, 0, 20, 21, 0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20),
		(0, 33, 28, 26, 22, 20, 25, 30, 21, 6, 11, 14, 0, 22, 20, 21, 0, 20, 21, 0, 20, 0, 20, 0, 20, 20, 20, 20, 20),
		(0, 31, 33, 27, 29, 28, 34, 26, 24, 32, 10, 16, 25, 23, 19, 18, 12, 2, 15, 9, 8, 4, 17, 3, 7, 13, 6, 5, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
		(0, 31, 33, 27, 29, 28, 34, 26, 24, 32, 10, 16, 25, 23, 19, 18, 21, 12, 2, 15, 9, 8, 4, 17, 3, 7, 13, 6, 5, 0, 19, 21, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
		(0, 27, 34, 23, 4, 13, 0, 0, 0),
		(0, 27, 34, 23, 4, 3, 13, 5, 0, 0, 0, 0, 0, 0, 0),
		(0, 27, 34, 23, 4, 3, 7, 13, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0),
		(0, 33, 28, 26, 22, 20, 25, 30, 19, 21, 17, 6, 11, 14, 0, 22, 20, 19, 21, 0, 20, 21, 0, 20, 0, 20, 0, 20, 0, 20, 20, 20, 20, 20),
		(0, 27, 28, 34, 26, 10, 16, 23, 18, 2, 15, 9, 8, 4, 17, 3, 7, 13, 6, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
		(0, 33, 28, 26, 22, 20, 25, 30, 19, 21, 11, 14, 0, 22, 20, 19, 21, 0, 20, 21, 0, 20, 0, 20, 0, 20, 0, 20, 20),
		(0, 31, 27, 29, 28, 34, 26, 32, 10, 16, 23, 18, 2, 15, 9, 8, 4, 17, 3, 7, 13, 6, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
		(0, 33, 28, 26, 22, 20, 25, 30, 21, 11, 14, 0, 22, 20, 21, 0, 20, 21, 0, 20, 0, 20, 0, 20, 20, 20),
		(0, 31, 27, 29, 28, 34, 26, 32, 10, 16, 23, 18, 12, 2, 15, 9, 8, 4, 17, 3, 7, 13, 6, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
		(0, 31, 33, 27, 29, 28, 34, 26, 24, 32, 10, 16, 25, 23, 18, 12, 2, 15, 9, 8, 4, 17, 3, 7, 13, 6, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
		(0, 33, 27, 28, 26, 22, 20, 25, 30, 19, 21, 6, 11, 14, 0, 22, 20, 19, 21, 0, 20, 21, 0, 20, 0, 20, 0, 20, 0, 20, 20, 20, 20),
		(0, 33, 28, 26, 22, 20, 25, 23, 30, 19, 21, 6, 11, 14, 0, 22, 20, 19, 21, 0, 20, 21, 0, 20, 0, 20, 0, 20, 0, 20, 20, 20, 20),
		(0, 31, 33, 27, 29, 28, 34, 26, 24, 32, 10, 16, 25, 23, 18, 21, 12, 2, 15, 9, 8, 4, 17, 3, 7, 13, 6, 5, 0, 21, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
		(0, 33, 28, 26, 22, 20, 25, 23, 30, 21, 6, 11, 14, 0, 22, 20, 21, 0, 20, 21, 0, 20, 0, 20, 0, 20, 20, 20, 20, 20),
		(0, 27, 34, 10, 16, 23, 18, 2, 15, 9, 8, 4, 17, 3, 7, 13, 6, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
		(0, 17, 0),
		(0, 19, 20, 0, 19),
		(0, 33, 27, 28, 26, 22, 20, 25, 30, 21, 6, 11, 14, 0, 22, 20, 21, 0, 20, 21, 0, 20, 0, 20, 0, 20, 20, 20, 20, 20),
		(0, 20),
		(0, 27),
		(0, 34, 23, 13, 0, 0),
		(0, 23),
		(0, 5, 0, 0, 0),
		(0, 27, 34),
		(0, 27, 34, 23),
		(0, 23, 4, 0),
	)

	def _get_act(self, pcb):
		# Get action table entry

		# Check action table first
		for (sym, pcb.act, pcb.idx) in self._act[pcb.tos.state]:
			if sym == pcb.sym:
				return True if pcb.act else False #enforced parse error

		# Otherwise, apply default production
		pcb.idx = self._def_prod[pcb.tos.state]
		if pcb.idx > -1:
			pcb.act = self._REDUCE
			return True

		return False

	def _get_go(self, pcb):
		# Get goto table entry

		for (sym, pcb.act, pcb.idx) in self._go[pcb.tos.state]:
			if sym == pcb.lhs:
				return True

		return False

	def _get_char(self, pcb):
		# Get next character from input stream

		if callable(pcb.input):
			return pcb.input()

		if pcb.input:
			ch = pcb.input[0]
			pcb.input = pcb.input[1:]
		else:
			ch = pcb.eof

		return ch

	def _get_input(self, pcb, offset):
		# Performs input buffering

		while offset >= len(pcb.buf):
			if pcb.is_eof:
				return pcb.eof

			ch = self._get_char(pcb)
			if ch == pcb.eof:
				pcb.is_eof = True
				return pcb.eof

			pcb.buf += ch

		#print("_get_input", pcb.buf, offset, pcb.buf[offset], ord(pcb.buf[offset]))

		return ord(pcb.buf[offset])

	def _clear_input(self, pcb):
		# Purge input from buffer that is not necessary anymore

		if pcb.buf:

			# Perform position counting.
			for pos in range(0, pcb.length):
				ch = pcb.buf[pos]
				if ch == '\n':
					pcb.line += 1
					pcb.column = 0
				else:
					pcb.column += 1

			pcb.buf = pcb.buf[pcb.length:]

		pcb.length = 0
		pcb.sym = -1

	def _lex(self, pcb):
		# Lexical analysis

		state = length = 0
		machine = self._dfa_select[pcb.tos.state] if not 0 else 0
		next = self._get_input(pcb, length)

		if next == pcb.eof:
			pcb.sym = 0
			return

		while state > -1 and next != pcb.eof:
			idx = self._dfa_index[machine][state]
			state = -1

			while self._dfa_chars[idx][0] > -1:
				if (next >= self._dfa_chars[idx][0]
					and next <= self._dfa_chars[idx][1]):

					length += 1
					state = self._dfa_trans[idx]

					if self._dfa_accept[machine][state] > 0:
						pcb.sym = self._dfa_accept[machine][state] - 1
						pcb.length = length

						# Test! (??)
						if pcb.sym == 0:
							state = -1
							break

						# Stop if matched symbol should be parsed nongreedy
						if not self._symbols[pcb.sym][5]:
							state = -1
							break

					next = self._get_input(pcb, length)
					break

				idx += 1

			# TODO: Semantic Terminal Selection?

		#print("_lex", pcb.sym, pcb.length)

	def _get_sym(self, pcb):
		# Get lookahead symbol

		pcb.sym = -1
		pcb.len = 0

		# insensitive mode
		if 0:
			while True:
				self._lex(pcb)

				# check for whitespace
				if pcb.sym > -1 and self._symbols[pcb.sym][4]:
					self._clear_input(pcb)
					continue

				break

		# sensitive mode
		else:
			if self._dfa_select[pcb.tos.state] > -1:
				self._lex(pcb)

			# If there is no matching DFA state machine, try to identify the
			# end-of-file symbol. If this also fails, a parse error will raise.
			elif self._get_input(pcb, 0) == pcb.eof:
				pcb.sym = 0

		return pcb.sym > -1


	def _reduce_action_0(self, pcb):
		
		return

	def _reduce_action_1(self, pcb):
		
		return

	def _reduce_action_2(self, pcb):
		
		return

	def _reduce_action_3(self, pcb):
		
		return

	def _reduce_action_4(self, pcb):
		
		return

	def _reduce_action_5(self, pcb):
		
		return

	def _reduce_action_6(self, pcb):
		
		return

	def _reduce_action_7(self, pcb):
		
		return

	def _reduce_action_8(self, pcb):
		
		return

	def _reduce_action_9(self, pcb):
		
		return

	def _reduce_action_10(self, pcb):
		
		return

	def _reduce_action_11(self, pcb):
		
		return

	def _reduce_action_12(self, pcb):
		
		return

	def _reduce_action_13(self, pcb):
		
		return

	def _reduce_action_14(self, pcb):
		
		return

	def _reduce_action_15(self, pcb):
		
		return

	def _reduce_action_16(self, pcb):
		
		return

	def _reduce_action_17(self, pcb):
		
		return

	def _reduce_action_18(self, pcb):
		
		return

	def _reduce_action_19(self, pcb):
		
		return

	def _reduce_action_20(self, pcb):
		
		return

	def _reduce_action_21(self, pcb):
		
		return

	def _reduce_action_22(self, pcb):
		
		return

	def _reduce_action_23(self, pcb):
		
		return

	def _reduce_action_24(self, pcb):
		
		return

	def _reduce_action_25(self, pcb):
		
		return

	def _reduce_action_26(self, pcb):
		
		return

	def _reduce_action_27(self, pcb):
		
		return

	def _reduce_action_28(self, pcb):
		
		return

	def _reduce_action_29(self, pcb):
		
		return

	def _reduce_action_30(self, pcb):
		
		return

	def _reduce_action_31(self, pcb):
		
		return

	def _reduce_action_32(self, pcb):
		
		return

	def _reduce_action_33(self, pcb):
		
		return

	def _reduce_action_34(self, pcb):
		
		return

	def _reduce_action_35(self, pcb):
		
		return

	def _reduce_action_36(self, pcb):
		
		return

	def _reduce_action_37(self, pcb):
		
		return

	def _reduce_action_38(self, pcb):
		
		return

	def _reduce_action_39(self, pcb):
		
		return

	def _reduce_action_40(self, pcb):
		
		return

	def _reduce_action_41(self, pcb):
		
		return

	def _reduce_action_42(self, pcb):
		
		return

	def _reduce_action_43(self, pcb):
		
		return

	def _reduce_action_44(self, pcb):
		
		return

	def _reduce_action_45(self, pcb):
		
		return

	def _reduce_action_46(self, pcb):
		
		return

	def _reduce_action_47(self, pcb):
		
		return

	def _reduce_action_48(self, pcb):
		
		return

	def _reduce_action_49(self, pcb):
		
		return

	def _reduce_action_50(self, pcb):
		
		return

	def _reduce_action_51(self, pcb):
		
		return

	def _reduce_action_52(self, pcb):
		
		return

	def _reduce_action_53(self, pcb):
		
		return

	def _reduce_action_54(self, pcb):
		
		return

	def _reduce_action_55(self, pcb):
		
		return

	def _reduce_action_56(self, pcb):
		
		return

	def _reduce_action_57(self, pcb):
		
		return

	def _reduce_action_58(self, pcb):
		
		return

	def _reduce_action_59(self, pcb):
		
		return

	def _reduce_action_60(self, pcb):
		
		return

	def _reduce_action_61(self, pcb):
		
		return

	def _reduce_action_62(self, pcb):
		
		return

	def _reduce_action_63(self, pcb):
		
		return

	def _reduce_action_64(self, pcb):
		
		return

	def _reduce_action_65(self, pcb):
		
		return

	def _reduce_action_66(self, pcb):
		
		return

	def _reduce_action_67(self, pcb):
		
		return

	def _reduce_action_68(self, pcb):
		
		return

	def _reduce_action_69(self, pcb):
		
		return

	def _reduce_action_70(self, pcb):
		
		return

	def _reduce_action_71(self, pcb):
		
		return

	def _reduce_action_72(self, pcb):
		
		return

	def _reduce_action_73(self, pcb):
		
		return

	def _reduce_action_74(self, pcb):
		
		return

	def _reduce_action_75(self, pcb):
		
		return

	def _reduce_action_76(self, pcb):
		
		return

	def _reduce_action_77(self, pcb):
		
		return

	def _reduce_action_78(self, pcb):
		
		return

	def _reduce_action_79(self, pcb):
		
		return

	def _reduce_action_80(self, pcb):
		
		return

	def _reduce_action_81(self, pcb):
		
		return

	def _reduce_action_82(self, pcb):
		
		return

	def _reduce_action_83(self, pcb):
		
		return

	def _reduce_action_84(self, pcb):
		
		return

	def _reduce_action_85(self, pcb):
		
		return

	def _reduce_action_86(self, pcb):
		
		return

	def _reduce_action_87(self, pcb):
		
		return

	def _reduce_action_88(self, pcb):
		
		return

	def _reduce_action_89(self, pcb):
		
		return

	def _reduce_action_90(self, pcb):
		
		return

	def _reduce_action_91(self, pcb):
		
		return

	def _reduce_action_92(self, pcb):
		
		return

	def _reduce_action_93(self, pcb):
		
		return

	def _reduce_action_94(self, pcb):
		
		return

	def _reduce_action_95(self, pcb):
		
		return

	def _reduce_action_96(self, pcb):
		
		return

	def _reduce_action_97(self, pcb):
		
		return

	def _reduce_action_98(self, pcb):
		
		return

	def _reduce_action_99(self, pcb):
		
		return

	def _reduce_action_100(self, pcb):
		
		return

	def _reduce_action_101(self, pcb):
		
		return

	def _reduce_action_102(self, pcb):
		
		return

	def _reduce_action_103(self, pcb):
		
		return

	def _reduce_action_104(self, pcb):
		
		return

	def _reduce_action_105(self, pcb):
		
		return

	def _reduce_action_106(self, pcb):
		
		return

	def _reduce_action_107(self, pcb):
		
		return

	def _reduce_action_108(self, pcb):
		
		return

	def _reduce_action_109(self, pcb):
		
		return

	def _reduce_action_110(self, pcb):
		
		return

	def _reduce_action_111(self, pcb):
		
		return



	def parse(self, s = None):
		if s is None:
			try:
				s = raw_input(">")
			except NameError:
				s = input(">")

		pcb = ParserControlBlock()
		pcb.input = s

		pcb.tos = ParserToken()
		pcb.stack.append(pcb.tos)

		while True:
			#print("state = %d" % pcb.tos.state)

			# TODO: Error Recovery
			self._get_sym(pcb)

			#print("pcb.sym = %d (%s)" % (pcb.sym, self._symbols[pcb.sym][0]))
			#print("pcb.length = %d" % pcb.length)

			# Get action table entry
			if not self._get_act(pcb):
				print("Parse Error")
				print("Expecting %s" % ", ".join(self._symbols[sym][0]
					for (sym, pcb.act, pcb.idx) in self._act[pcb.tos.state]))
				break

			#print("pcb.act = %d" % pcb.act)

			# Shift
			if pcb.act & self._SHIFT:
				#print("SHIFT", pcb.sym, self._symbols[pcb.sym])

				pcb.tos = ParserToken()
				pcb.stack.append(pcb.tos)

				# Execute scanner actions, if existing.
				#fn = getattr(self, "scan_action_%d" % pcb.sym)()

				pcb.tos.state = -1 if pcb.act & self._REDUCE else pcb.idx
				pcb.tos.symbol = self._symbols[pcb.sym]

				pcb.tos.line = pcb.line
				pcb.tos.column = pcb.column
				pcb.stack[-1 - 0].value = pcb.buf[:pcb.length]

				if pcb.tos.symbol[1]:
					pcb.tos.node = Node(pcb.tos.symbol[1], pcb.stack[-1 - 0].value)

				if pcb.sym != 0 and pcb.sym != -1:
					self._clear_input(pcb)
					pcb.old_sym = -1

			# Reduce
			while pcb.act & self._REDUCE:

				# Set default left-hand side
				pcb.lhs = self._productions[pcb.idx][3]

				#print("REDUCE", pcb.idx, self._productions[pcb.idx][0])
				#print("state", pcb.tos.state)

				# Call reduce function
				#print("CALL", "_reduce_action_%d" % pcb.idx)
				getattr(self, "_reduce_action_%d" % pcb.idx)(pcb)

				# Drop right-hand side
				cnodes = None
				for _ in range(0, self._productions[pcb.idx][2]):
					item = pcb.stack.pop()

					if item.node:
						if cnodes is None:
							cnodes = []

						if isinstance(item.node, list):
							cnodes = item.node + cnodes
						else:
							cnodes.insert(0, item.node)

				pcb.tos = pcb.stack[-1]

				# Handle AST nodes
				if self._productions[pcb.idx][1]:
					#print("%s = %s" % (self._productions[pcb.idx][0], self._productions[pcb.idx][1]))
					node = Node(self._productions[pcb.idx][1],
											children=cnodes)

				else:
					node = None

				# Goal symbol reduced, and stack is empty?
				if pcb.lhs == 53 and len(pcb.stack) == 1:
					pcb.tos.node = node or cnodes
					self._clear_input(pcb)
					break

				self._get_go(pcb)

				pcb.tos = ParserToken()
				pcb.stack.append(pcb.tos)

				pcb.tos.symbol = self._symbols[pcb.lhs]
				pcb.tos.state = -1 if pcb.act & self._REDUCE else pcb.idx
				pcb.tos.value = pcb.ret
				pcb.tos.node = node or cnodes
				pcb.tos.line = pcb.line
				pcb.tos.column = pcb.column

			if pcb.act & self._REDUCE and pcb.idx == 111:
				break

		if pcb.ret is None and pcb.tos.node:
			if isinstance(pcb.tos.node, list):
				if len(pcb.tos.node) > 1:
					node = Node(children=pcb.tos.node)
				else:
					node = pcb.tos.node[0]
			else:
				node = pcb.tos.node
		else:
			node = None

		return pcb.ret or node



if __name__ == "__main__":
	import sys

	p = Parser()
	ret = p.parse(sys.argv[1] if len(sys.argv) > 1 else None)

	if isinstance(ret, Node):
		ret.dump()

