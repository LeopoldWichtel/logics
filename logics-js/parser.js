// Parser module generated by unicc from logics.par.
// DO NOT EDIT THIS FILE MANUALLY, IT WILL GO AWAY!


class LogicsNode {
    constructor(emit, match, children) {
        this.emit = emit;
        this.match = match;
        this.children = children;
    }

    dump(level) {
        if( level === undefined )
            level = 0;

        if( this.emit !== undefined ) {
            let txt = this.emit;

            for( let i = 0; i < level; i++ )
                txt = " " + txt;

            if( this.match && this.match !== this.emit )
                txt += " (" + this.match + ")";

            console.log(txt);
            level++;
        }

        if( this.children ) {
            for( let child of this.children )
                if( Boolean( child ) )
                    child.dump(level);
        }
    }
}

class LogicsParserToken {
    constructor() {
        this.state = 0;
        this.line = 0;
        this.column = 0;

        this.node = null;

        value: null
    }
}

// Defining a custom exception for parse errors
class LogicsParseError extends Error {
    constructor(line, column, expecting) {
        super(`${line}:${column} Parse error, expecting '${expecting.join("', '")}'`);
        this.line = line;
        this.column = column;
        this.expecting = expecting;
    }
}

// Parser Control Block is used to handle parser states
class LogicsParserControlBlock {
    constructor() {
        // Stack
        this.stack = [];
        this.tos = null;

        // Values
        this.ret = null;

        // State
        this.act = null;
        this.idx = null;
        this.lhs = null;

        // Lookahead
        this.sym = -1;
        this.old_sym = -1;
        this.len = 0;

        // Lexical analysis
        this.lexem = null;
        this.next = null;
        this.eof = null;
        this.is_eof = false;

        // Input buffering
        this.input = null;
        this.buf = "";

        // Error handling
        this.error_delay = 3;
        this.error_count = 0;

        this.line = 1;
        this.column = 1;

        // User-defined
        
    }

    get top() {
        return this.stack[ this.stack.length - ( 0 + 1 ) ].value;
    }

    set top(value) {
        this.stack[ this.stack.length - ( 0 + 1 ) ].value = value;
    }

    // Parsing actions

    
    
}

// Parser

export default class LogicsParser {
    static #grammar = {
        "symbols": [
				{ "symbol": "&eof", "emit": "", "is-terminal": 3, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "in", "emit": "", "is-terminal": 2, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "for", "emit": "", "is-terminal": 2, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "None", "emit": "None", "is-terminal": 2, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "False", "emit": "False", "is-terminal": 2, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "True", "emit": "True", "is-terminal": 2, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "**", "emit": "", "is-terminal": 2, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "<>", "emit": "", "is-terminal": 2, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "!=", "emit": "", "is-terminal": 2, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "<=", "emit": "", "is-terminal": 2, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "<", "emit": "", "is-terminal": 2, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": ">=", "emit": "", "is-terminal": 2, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": ">", "emit": "", "is-terminal": 2, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "==", "emit": "", "is-terminal": 2, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "not", "emit": "", "is-terminal": 2, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "and", "emit": "", "is-terminal": 2, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "or", "emit": "", "is-terminal": 2, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "else", "emit": "", "is-terminal": 2, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "if", "emit": "", "is-terminal": 2, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "String", "emit": "String", "is-terminal": 2, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 0 },
				{ "symbol": "Number", "emit": "Number", "is-terminal": 2, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "Identifier", "emit": "Identifier", "is-terminal": 2, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "whitespace", "emit": "", "is-terminal": 2, "is-lexem": 0, "is-whitespace": 1, "is-greedy": 1 },
				{ "symbol": ",", "emit": "", "is-terminal": 1, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": ".", "emit": "", "is-terminal": 1, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": ":", "emit": "", "is-terminal": 1, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "]", "emit": "", "is-terminal": 1, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "[", "emit": "", "is-terminal": 1, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": ")", "emit": "", "is-terminal": 1, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "(", "emit": "", "is-terminal": 1, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "~", "emit": "", "is-terminal": 1, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "%", "emit": "", "is-terminal": 1, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "/", "emit": "", "is-terminal": 1, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "*", "emit": "", "is-terminal": 1, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "-", "emit": "", "is-terminal": 1, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "+", "emit": "", "is-terminal": 1, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "expression'", "emit": "", "is-terminal": 0, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "&embedded_3+", "emit": "", "is-terminal": 0, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "&embedded_3", "emit": "", "is-terminal": 0, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "&embedded_2?", "emit": "", "is-terminal": 0, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "&embedded_2", "emit": "", "is-terminal": 0, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "comprehension", "emit": "", "is-terminal": 0, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "String+", "emit": "", "is-terminal": 0, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "list", "emit": "", "is-terminal": 0, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "opt_expression", "emit": "", "is-terminal": 0, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "trailer+", "emit": "", "is-terminal": 0, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "trailer", "emit": "", "is-terminal": 0, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "atom", "emit": "", "is-terminal": 0, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "factor", "emit": "", "is-terminal": 0, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "pow", "emit": "", "is-terminal": 0, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "unary", "emit": "", "is-terminal": 0, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "mul_div", "emit": "", "is-terminal": 0, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "&embedded_1+", "emit": "", "is-terminal": 0, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "&embedded_1", "emit": "", "is-terminal": 0, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "&embedded_0", "emit": "", "is-terminal": 0, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "add_sub", "emit": "", "is-terminal": 0, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "cmp", "emit": "", "is-terminal": 0, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "not", "emit": "", "is-terminal": 0, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "and", "emit": "", "is-terminal": 0, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "or", "emit": "", "is-terminal": 0, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 },
				{ "symbol": "expression", "emit": "", "is-terminal": 0, "is-lexem": 0, "is-whitespace": 0, "is-greedy": 1 }
        ],
        "productions": [
				{ "production": "expression : or \"if\" expression \"else\" expression", "emit": "if", "length": 5, "left-hand-side": 60 },
				{ "production": "expression : or", "emit": "", "length": 1, "left-hand-side": 60 },
				{ "production": "or : or \"or\" and", "emit": "or", "length": 3, "left-hand-side": 59 },
				{ "production": "or : and", "emit": "", "length": 1, "left-hand-side": 59 },
				{ "production": "and : and \"and\" not", "emit": "and", "length": 3, "left-hand-side": 58 },
				{ "production": "and : not", "emit": "", "length": 1, "left-hand-side": 58 },
				{ "production": "not : \"not\" not", "emit": "not", "length": 2, "left-hand-side": 57 },
				{ "production": "not : cmp", "emit": "", "length": 1, "left-hand-side": 57 },
				{ "production": "cmp : add_sub &embedded_1+", "emit": "cmp", "length": 2, "left-hand-side": 56 },
				{ "production": "&embedded_1 : \"==\" add_sub", "emit": "eq", "length": 2, "left-hand-side": 53 },
				{ "production": "&embedded_1 : \">\" add_sub", "emit": "gt", "length": 2, "left-hand-side": 53 },
				{ "production": "&embedded_1 : \">=\" add_sub", "emit": "gteq", "length": 2, "left-hand-side": 53 },
				{ "production": "&embedded_1 : \"<\" add_sub", "emit": "lt", "length": 2, "left-hand-side": 53 },
				{ "production": "&embedded_1 : \"<=\" add_sub", "emit": "lteq", "length": 2, "left-hand-side": 53 },
				{ "production": "&embedded_0 : \"!=\"", "emit": "", "length": 1, "left-hand-side": 54 },
				{ "production": "&embedded_0 : \"<>\"", "emit": "", "length": 1, "left-hand-side": 54 },
				{ "production": "&embedded_1 : &embedded_0 add_sub", "emit": "neq", "length": 2, "left-hand-side": 53 },
				{ "production": "&embedded_1+ : &embedded_1+ &embedded_1", "emit": "", "length": 2, "left-hand-side": 52 },
				{ "production": "&embedded_1+ : &embedded_1", "emit": "", "length": 1, "left-hand-side": 52 },
				{ "production": "cmp : add_sub", "emit": "", "length": 1, "left-hand-side": 56 },
				{ "production": "add_sub : add_sub '+' mul_div", "emit": "add", "length": 3, "left-hand-side": 55 },
				{ "production": "add_sub : add_sub '-' mul_div", "emit": "sub", "length": 3, "left-hand-side": 55 },
				{ "production": "add_sub : mul_div", "emit": "", "length": 1, "left-hand-side": 55 },
				{ "production": "mul_div : mul_div '*' unary", "emit": "mul", "length": 3, "left-hand-side": 51 },
				{ "production": "mul_div : mul_div '/' unary", "emit": "div", "length": 3, "left-hand-side": 51 },
				{ "production": "mul_div : mul_div '%' unary", "emit": "mod", "length": 3, "left-hand-side": 51 },
				{ "production": "mul_div : unary", "emit": "", "length": 1, "left-hand-side": 51 },
				{ "production": "pow : pow \"**\" unary", "emit": "pow", "length": 3, "left-hand-side": 49 },
				{ "production": "pow : unary", "emit": "", "length": 1, "left-hand-side": 49 },
				{ "production": "unary : '+' unary", "emit": "pos", "length": 2, "left-hand-side": 50 },
				{ "production": "unary : '-' unary", "emit": "neg", "length": 2, "left-hand-side": 50 },
				{ "production": "unary : '~' unary", "emit": "invert", "length": 2, "left-hand-side": 50 },
				{ "production": "unary : factor", "emit": "", "length": 1, "left-hand-side": 50 },
				{ "production": "factor : atom trailer+", "emit": "entity", "length": 2, "left-hand-side": 48 },
				{ "production": "trailer+ : trailer+ trailer", "emit": "", "length": 2, "left-hand-side": 45 },
				{ "production": "trailer+ : trailer", "emit": "", "length": 1, "left-hand-side": 45 },
				{ "production": "factor : atom", "emit": "", "length": 1, "left-hand-side": 48 },
				{ "production": "opt_expression : expression", "emit": "", "length": 1, "left-hand-side": 44 },
				{ "production": "opt_expression : ", "emit": "None", "length": 0, "left-hand-side": 44 },
				{ "production": "trailer : '(' list ')'", "emit": "", "length": 3, "left-hand-side": 46 },
				{ "production": "trailer : '[' expression ']'", "emit": "index", "length": 3, "left-hand-side": 46 },
				{ "production": "trailer : '[' opt_expression ':' opt_expression ']'", "emit": "slice", "length": 5, "left-hand-side": 46 },
				{ "production": "trailer : '.' @Identifier", "emit": "", "length": 2, "left-hand-side": 46 },
				{ "production": "atom : \"True\"", "emit": "", "length": 1, "left-hand-side": 47 },
				{ "production": "atom : \"False\"", "emit": "", "length": 1, "left-hand-side": 47 },
				{ "production": "atom : \"None\"", "emit": "", "length": 1, "left-hand-side": 47 },
				{ "production": "atom : @Number", "emit": "", "length": 1, "left-hand-side": 47 },
				{ "production": "atom : @Identifier", "emit": "", "length": 1, "left-hand-side": 47 },
				{ "production": "atom : @String", "emit": "", "length": 1, "left-hand-side": 47 },
				{ "production": "String+ : String+ @String", "emit": "", "length": 2, "left-hand-side": 42 },
				{ "production": "String+ : @String", "emit": "", "length": 1, "left-hand-side": 42 },
				{ "production": "atom : String+", "emit": "strings", "length": 1, "left-hand-side": 47 },
				{ "production": "atom : comprehension", "emit": "", "length": 1, "left-hand-side": 47 },
				{ "production": "atom : '[' list ']'", "emit": "", "length": 3, "left-hand-side": 47 },
				{ "production": "atom : '(' expression ')'", "emit": "", "length": 3, "left-hand-side": 47 },
				{ "production": "comprehension : '[' expression \"for\" @Identifier \"in\" or &embedded_2? ']'", "emit": "comprehension", "length": 8, "left-hand-side": 41 },
				{ "production": "&embedded_2 : \"if\" expression", "emit": "", "length": 2, "left-hand-side": 40 },
				{ "production": "&embedded_2? : &embedded_2", "emit": "", "length": 1, "left-hand-side": 39 },
				{ "production": "&embedded_2? : ", "emit": "", "length": 0, "left-hand-side": 39 },
				{ "production": "list : expression &embedded_3+", "emit": "list", "length": 2, "left-hand-side": 43 },
				{ "production": "&embedded_3 : ',' expression", "emit": "", "length": 2, "left-hand-side": 38 },
				{ "production": "&embedded_3+ : &embedded_3+ &embedded_3", "emit": "", "length": 2, "left-hand-side": 37 },
				{ "production": "&embedded_3+ : &embedded_3", "emit": "", "length": 1, "left-hand-side": 37 },
				{ "production": "list : expression", "emit": "list", "length": 1, "left-hand-side": 43 },
				{ "production": "expression' : expression ~&eof", "emit": "", "length": 2, "left-hand-side": 36 }
        ],
        "goal": 36
    };

    static #lexer = {
        "select": [
            
        ],
        "index": [
				[ 0, 43, 50, 51, 55, 56, 57, 59, 62, 63, 66, 67, 69, 70, 71, 72, 74, 75, 76, 77, 82, 87, 92, 93, 94, 95, 96, 97, 98, 99, 104, 109, 114, 119, 124, 129, 134, 136, 143, 144, 146, 152, 158, 163, 169, 173, 182, 188, 195, 197, 204, 210, 217, 221, 227, 233, 240, 247, 254, 261, 268, 275, 282, 289, 296, 303, 310, 317, 324 ]
        ],
        "chars": [
126, 126, 9, 10, 13, 13, 32, 32, 65, 69, 71, 77, 79, 83, 85, 90, 95, 95, 98, 100, 103, 104, 106, 109, 112, 122, 111, 111, 110, 110, 105, 105, 102, 102, 101, 101, 97, 97, 93, 93, 91, 91, 84, 84, 78, 78, 70, 70, 62, 62, 61, 61, 60, 60, 58, 58, 48, 57, 47, 47, 46, 46, 45, 45, 44, 44, 43, 43, 42, 42, 41, 41, 40, 40, 39, 39, 37, 37, 35, 35, 34, 34, 33, 33, -1, -1, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, 111, 111, -1, -1, -1, -1, 9, 10, 13, 13, 32, 32, -1, -1, -1, -1, -1, -1, 61, 61, -1, -1, 62, 62, 61, 61, -1, -1, -1, -1, 48, 57, 46, 46, -1, -1, -1, -1, 48, 57, -1, -1, -1, -1, -1, -1, -1, -1, 42, 42, -1, -1, -1, -1, -1, -1, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 61, 61, -1, -1, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, 114, 114, -1, -1, -1, -1, 48, 57, -1, -1, 92, 92, 39, 39, 0, 38, 40, 91, 93, 65535, -1, -1, 92, 92, 39, 39, 0, 38, 40, 91, 93, 65535, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 92, 92, 34, 34, 0, 33, 35, 91, 93, 65535, -1, -1, 10, 10, 0, 9, 11, 65535, -1, -1, 48, 57, 65, 90, 95, 95, 97, 101, 103, 109, 111, 122, 110, 110, 102, 102, -1, -1, 92, 92, 34, 34, 0, 33, 35, 91, 93, 65535, -1, -1, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, 108, 108, -1, -1, 61, 61, -1, -1, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, 110, 110, -1, -1, 0, 38, 40, 91, 93, 65535, 92, 92, 39, 39, -1, -1, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, 114, 114, -1, -1, 0, 9, 11, 65535, 10, 10, -1, -1, 48, 57, 65, 90, 95, 95, 98, 122, 97, 97, -1, -1, 0, 33, 35, 91, 93, 65535, 92, 92, 34, 34, -1, -1, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, 116, 116, -1, -1, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, 114, 114, -1, -1, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, 115, 115, -1, -1, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, 100, 100, -1, -1, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, 117, 117, -1, -1, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, 101, 101, -1, -1, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, 101, 101, -1, -1, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, 101, 101, -1, -1, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, 101, 101, -1, -1, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, 111, 111, -1, -1, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, 110, 110, -1, -1, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, 115, 115, -1, -1, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, 111, 111, -1, -1, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, 108, 108, -1, -1
        ],
        "transitions": [
2, 3, 3, 3, 42, 42, 42, 42, 42, 42, 42, 42, 42, 37, 1, 45, 64, 47, 49, 4, 5, 51, 67, 53, 6, 36, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 41, 18, 44, 46, 48, -1, 42, 42, 42, 42, 42, 55, -1, -1, 3, 3, 3, -1, -1, -1, 22, -1, 24, 25, -1, -1, 9, 39, -1, -1, 39, -1, -1, -1, -1, 26, -1, -1, -1, -1, 42, 42, 42, 42, -1, 42, 42, 42, 42, -1, 42, 42, 42, 42, -1, -1, -1, -1, -1, -1, -1, -1, 42, 42, 42, 42, -1, 42, 42, 42, 42, -1, 42, 42, 42, 42, -1, 42, 42, 42, 42, -1, 42, 42, 42, 42, -1, 42, 42, 42, 42, -1, 42, 42, 42, 42, -1, 23, -1, 42, 42, 42, 42, 42, 19, -1, -1, 39, -1, 50, 27, 41, 41, 41, -1, 50, 27, 41, 41, 41, -1, 42, 42, 42, 42, -1, 54, 27, 46, 46, 46, -1, 38, 52, 52, -1, 42, 42, 42, 42, 42, 42, 20, 21, -1, 54, 27, 46, 46, 46, -1, 42, 42, 42, 42, 42, 57, -1, 28, -1, 42, 42, 42, 42, 42, 58, -1, 41, 41, 41, 50, 40, -1, 42, 42, 42, 42, 42, 59, -1, 52, 52, 38, -1, 42, 42, 42, 42, 68, -1, 46, 46, 46, 54, 43, -1, 42, 42, 42, 42, 42, 29, -1, 42, 42, 42, 42, 42, 30, -1, 42, 42, 42, 42, 42, 60, -1, 42, 42, 42, 42, 42, 31, -1, 42, 42, 42, 42, 42, 61, -1, 42, 42, 42, 42, 42, 32, -1, 42, 42, 42, 42, 42, 33, -1, 42, 42, 42, 42, 42, 34, -1, 42, 42, 42, 42, 42, 35, -1, 42, 42, 42, 42, 42, 56, -1, 42, 42, 42, 42, 42, 62, -1, 42, 42, 42, 42, 42, 63, -1, 42, 42, 42, 42, 42, 65, -1, 42, 42, 42, 42, 42, 66, -1
        ],
        "accept": [
				[ 0, 22, 31, 23, 27, 28, 13, 11, 26, 21, 33, 25, 35, 24, 36, 34, 29, 30, 32, 17, 2, 19, 12, 14, 8, 10, 7, 20, 9, 15, 3, 16, 18, 6, 4, 5, 0, 22, 23, 21, 20, 0, 22, 20, 0, 22, 0, 22, 0, 22, 0, 22, 0, 22, 0, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22 ]
        ]
    };
    static #parser = {
        "action": [
				{ 21: [ 3,47 ], 20: [ 3,46 ], 19: [ 2,1 ], 14: [ 2,5 ], 35: [ 2,7 ], 34: [ 2,9 ], 30: [ 2,10 ], 29: [ 2,12 ], 27: [ 2,13 ], 5: [ 3,43 ], 4: [ 3,44 ], 3: [ 3,45 ] },
				{ 19: [ 1,50 ] },
				{ 0: [ 3,64 ] },
				{ 18: [ 2,15 ], 16: [ 2,16 ] },
				{ 15: [ 2,17 ] },
				{ 21: [ 3,47 ], 20: [ 3,46 ], 19: [ 2,1 ], 14: [ 2,5 ], 35: [ 2,7 ], 34: [ 2,9 ], 30: [ 2,10 ], 29: [ 2,12 ], 27: [ 2,13 ], 5: [ 3,43 ], 4: [ 3,44 ], 3: [ 3,45 ] },
				{ 13: [ 2,18 ], 12: [ 2,19 ], 11: [ 2,20 ], 10: [ 2,21 ], 9: [ 2,22 ], 8: [ 3,14 ], 7: [ 3,15 ], 35: [ 2,25 ], 34: [ 2,26 ] },
				{ 21: [ 3,47 ], 20: [ 3,46 ], 19: [ 2,1 ], 35: [ 2,7 ], 34: [ 2,9 ], 30: [ 2,10 ], 29: [ 2,12 ], 27: [ 2,13 ], 5: [ 3,43 ], 4: [ 3,44 ], 3: [ 3,45 ] },
				{ 33: [ 2,27 ], 32: [ 2,28 ], 31: [ 2,29 ] },
				{ 21: [ 3,47 ], 20: [ 3,46 ], 19: [ 2,1 ], 35: [ 2,7 ], 34: [ 2,9 ], 30: [ 2,10 ], 29: [ 2,12 ], 27: [ 2,13 ], 5: [ 3,43 ], 4: [ 3,44 ], 3: [ 3,45 ] },
				{ 21: [ 3,47 ], 20: [ 3,46 ], 19: [ 2,1 ], 35: [ 2,7 ], 34: [ 2,9 ], 30: [ 2,10 ], 29: [ 2,12 ], 27: [ 2,13 ], 5: [ 3,43 ], 4: [ 3,44 ], 3: [ 3,45 ] },
				{ 29: [ 2,31 ], 27: [ 2,32 ], 24: [ 2,33 ] },
				{ 21: [ 3,47 ], 20: [ 3,46 ], 19: [ 2,1 ], 14: [ 2,5 ], 35: [ 2,7 ], 34: [ 2,9 ], 30: [ 2,10 ], 29: [ 2,12 ], 27: [ 2,13 ], 5: [ 3,43 ], 4: [ 3,44 ], 3: [ 3,45 ] },
				{ 21: [ 3,47 ], 20: [ 3,46 ], 19: [ 2,1 ], 14: [ 2,5 ], 35: [ 2,7 ], 34: [ 2,9 ], 30: [ 2,10 ], 29: [ 2,12 ], 27: [ 2,13 ], 5: [ 3,43 ], 4: [ 3,44 ], 3: [ 3,45 ] },
				{ 19: [ 3,49 ] },
				{ 21: [ 3,47 ], 20: [ 3,46 ], 19: [ 2,1 ], 14: [ 2,5 ], 35: [ 2,7 ], 34: [ 2,9 ], 30: [ 2,10 ], 29: [ 2,12 ], 27: [ 2,13 ], 5: [ 3,43 ], 4: [ 3,44 ], 3: [ 3,45 ] },
				{ 21: [ 3,47 ], 20: [ 3,46 ], 19: [ 2,1 ], 14: [ 2,5 ], 35: [ 2,7 ], 34: [ 2,9 ], 30: [ 2,10 ], 29: [ 2,12 ], 27: [ 2,13 ], 5: [ 3,43 ], 4: [ 3,44 ], 3: [ 3,45 ] },
				{ 21: [ 3,47 ], 20: [ 3,46 ], 19: [ 2,1 ], 14: [ 2,5 ], 35: [ 2,7 ], 34: [ 2,9 ], 30: [ 2,10 ], 29: [ 2,12 ], 27: [ 2,13 ], 5: [ 3,43 ], 4: [ 3,44 ], 3: [ 3,45 ] },
				{ 21: [ 3,47 ], 20: [ 3,46 ], 19: [ 2,1 ], 35: [ 2,7 ], 34: [ 2,9 ], 30: [ 2,10 ], 29: [ 2,12 ], 27: [ 2,13 ], 5: [ 3,43 ], 4: [ 3,44 ], 3: [ 3,45 ] },
				{ 21: [ 3,47 ], 20: [ 3,46 ], 19: [ 2,1 ], 35: [ 2,7 ], 34: [ 2,9 ], 30: [ 2,10 ], 29: [ 2,12 ], 27: [ 2,13 ], 5: [ 3,43 ], 4: [ 3,44 ], 3: [ 3,45 ] },
				{ 21: [ 3,47 ], 20: [ 3,46 ], 19: [ 2,1 ], 35: [ 2,7 ], 34: [ 2,9 ], 30: [ 2,10 ], 29: [ 2,12 ], 27: [ 2,13 ], 5: [ 3,43 ], 4: [ 3,44 ], 3: [ 3,45 ] },
				{ 21: [ 3,47 ], 20: [ 3,46 ], 19: [ 2,1 ], 35: [ 2,7 ], 34: [ 2,9 ], 30: [ 2,10 ], 29: [ 2,12 ], 27: [ 2,13 ], 5: [ 3,43 ], 4: [ 3,44 ], 3: [ 3,45 ] },
				{ 21: [ 3,47 ], 20: [ 3,46 ], 19: [ 2,1 ], 35: [ 2,7 ], 34: [ 2,9 ], 30: [ 2,10 ], 29: [ 2,12 ], 27: [ 2,13 ], 5: [ 3,43 ], 4: [ 3,44 ], 3: [ 3,45 ] },
				{ 21: [ 3,47 ], 20: [ 3,46 ], 19: [ 2,1 ], 35: [ 2,7 ], 34: [ 2,9 ], 30: [ 2,10 ], 29: [ 2,12 ], 27: [ 2,13 ], 5: [ 3,43 ], 4: [ 3,44 ], 3: [ 3,45 ] },
				{ 13: [ 2,18 ], 12: [ 2,19 ], 11: [ 2,20 ], 10: [ 2,21 ], 9: [ 2,22 ], 8: [ 3,14 ], 7: [ 3,15 ] },
				{ 21: [ 3,47 ], 20: [ 3,46 ], 19: [ 2,1 ], 35: [ 2,7 ], 34: [ 2,9 ], 30: [ 2,10 ], 29: [ 2,12 ], 27: [ 2,13 ], 5: [ 3,43 ], 4: [ 3,44 ], 3: [ 3,45 ] },
				{ 21: [ 3,47 ], 20: [ 3,46 ], 19: [ 2,1 ], 35: [ 2,7 ], 34: [ 2,9 ], 30: [ 2,10 ], 29: [ 2,12 ], 27: [ 2,13 ], 5: [ 3,43 ], 4: [ 3,44 ], 3: [ 3,45 ] },
				{ 21: [ 3,47 ], 20: [ 3,46 ], 19: [ 2,1 ], 35: [ 2,7 ], 34: [ 2,9 ], 30: [ 2,10 ], 29: [ 2,12 ], 27: [ 2,13 ], 5: [ 3,43 ], 4: [ 3,44 ], 3: [ 3,45 ] },
				{ 21: [ 3,47 ], 20: [ 3,46 ], 19: [ 2,1 ], 35: [ 2,7 ], 34: [ 2,9 ], 30: [ 2,10 ], 29: [ 2,12 ], 27: [ 2,13 ], 5: [ 3,43 ], 4: [ 3,44 ], 3: [ 3,45 ] },
				{ 21: [ 3,47 ], 20: [ 3,46 ], 19: [ 2,1 ], 35: [ 2,7 ], 34: [ 2,9 ], 30: [ 2,10 ], 29: [ 2,12 ], 27: [ 2,13 ], 5: [ 3,43 ], 4: [ 3,44 ], 3: [ 3,45 ] },
				{ 29: [ 2,31 ], 27: [ 2,32 ], 24: [ 2,33 ] },
				{ 21: [ 3,47 ], 20: [ 3,46 ], 19: [ 2,1 ], 14: [ 2,5 ], 35: [ 2,7 ], 34: [ 2,9 ], 30: [ 2,10 ], 29: [ 2,12 ], 27: [ 2,13 ], 5: [ 3,43 ], 4: [ 3,44 ], 3: [ 3,45 ] },
				{ 21: [ 3,47 ], 20: [ 3,46 ], 19: [ 2,1 ], 14: [ 2,5 ], 35: [ 2,7 ], 34: [ 2,9 ], 30: [ 2,10 ], 29: [ 2,12 ], 27: [ 2,13 ], 5: [ 3,43 ], 4: [ 3,44 ], 3: [ 3,45 ] },
				{ 21: [ 3,42 ] },
				{ 28: [ 3,54 ] },
				{ 2: [ 2,51 ], 23: [ 2,52 ] },
				{ 26: [ 3,53 ] },
				{ 17: [ 2,54 ] },
				{ 15: [ 2,17 ] },
				{ 35: [ 2,25 ], 34: [ 2,26 ] },
				{ 35: [ 2,25 ], 34: [ 2,26 ] },
				{ 35: [ 2,25 ], 34: [ 2,26 ] },
				{ 35: [ 2,25 ], 34: [ 2,26 ] },
				{ 35: [ 2,25 ], 34: [ 2,26 ] },
				{ 35: [ 2,25 ], 34: [ 2,26 ] },
				{ 33: [ 2,27 ], 32: [ 2,28 ], 31: [ 2,29 ] },
				{ 33: [ 2,27 ], 32: [ 2,28 ], 31: [ 2,29 ] },
				{ 23: [ 2,52 ] },
				{ 28: [ 3,39 ] },
				{ 26: [ 3,40 ] },
				{ 25: [ 2,55 ] },
				{ 21: [ 2,56 ] },
				{ 21: [ 3,47 ], 20: [ 3,46 ], 19: [ 2,1 ], 14: [ 2,5 ], 35: [ 2,7 ], 34: [ 2,9 ], 30: [ 2,10 ], 29: [ 2,12 ], 27: [ 2,13 ], 5: [ 3,43 ], 4: [ 3,44 ], 3: [ 3,45 ] },
				{ 23: [ 2,52 ] },
				{ 21: [ 3,47 ], 20: [ 3,46 ], 19: [ 2,1 ], 14: [ 2,5 ], 35: [ 2,7 ], 34: [ 2,9 ], 30: [ 2,10 ], 29: [ 2,12 ], 27: [ 2,13 ], 5: [ 3,43 ], 4: [ 3,44 ], 3: [ 3,45 ] },
				{ 21: [ 3,47 ], 20: [ 3,46 ], 19: [ 2,1 ], 14: [ 2,5 ], 35: [ 2,7 ], 34: [ 2,9 ], 30: [ 2,10 ], 29: [ 2,12 ], 27: [ 2,13 ], 5: [ 3,43 ], 4: [ 3,44 ], 3: [ 3,45 ] },
				{ 1: [ 2,58 ] },
				{ 26: [ 3,41 ] },
				{ 21: [ 3,47 ], 20: [ 3,46 ], 19: [ 2,1 ], 14: [ 2,5 ], 35: [ 2,7 ], 34: [ 2,9 ], 30: [ 2,10 ], 29: [ 2,12 ], 27: [ 2,13 ], 5: [ 3,43 ], 4: [ 3,44 ], 3: [ 3,45 ] },
				{ 18: [ 2,60 ], 16: [ 2,16 ] },
				{ 21: [ 3,47 ], 20: [ 3,46 ], 19: [ 2,1 ], 14: [ 2,5 ], 35: [ 2,7 ], 34: [ 2,9 ], 30: [ 2,10 ], 29: [ 2,12 ], 27: [ 2,13 ], 5: [ 3,43 ], 4: [ 3,44 ], 3: [ 3,45 ] },
				{ 26: [ 3,55 ] }
        ],
        "goto": [
				{ 60: [ 2,2 ], 59: [ 2,3 ], 58: [ 2,4 ], 57: [ 3,5 ], 56: [ 3,7 ], 55: [ 2,6 ], 51: [ 2,8 ], 50: [ 3,26 ], 48: [ 3,32 ], 47: [ 2,11 ], 42: [ 2,14 ], 41: [ 3,52 ] },
				{  },
				{  },
				{  },
				{  },
				{ 57: [ 3,6 ], 56: [ 3,7 ], 55: [ 2,6 ], 51: [ 2,8 ], 50: [ 3,26 ], 48: [ 3,32 ], 47: [ 2,11 ], 42: [ 2,14 ], 41: [ 3,52 ] },
				{ 54: [ 2,23 ], 53: [ 3,18 ], 52: [ 2,24 ] },
				{ 50: [ 3,29 ], 48: [ 3,32 ], 47: [ 2,11 ], 42: [ 2,14 ], 41: [ 3,52 ] },
				{  },
				{ 50: [ 3,30 ], 48: [ 3,32 ], 47: [ 2,11 ], 42: [ 2,14 ], 41: [ 3,52 ] },
				{ 50: [ 3,31 ], 48: [ 3,32 ], 47: [ 2,11 ], 42: [ 2,14 ], 41: [ 3,52 ] },
				{ 46: [ 3,35 ], 45: [ 2,30 ] },
				{ 60: [ 2,34 ], 59: [ 2,3 ], 58: [ 2,4 ], 57: [ 3,5 ], 56: [ 3,7 ], 55: [ 2,6 ], 51: [ 2,8 ], 50: [ 3,26 ], 48: [ 3,32 ], 47: [ 2,11 ], 42: [ 2,14 ], 41: [ 3,52 ] },
				{ 60: [ 2,35 ], 59: [ 2,3 ], 58: [ 2,4 ], 57: [ 3,5 ], 56: [ 3,7 ], 55: [ 2,6 ], 51: [ 2,8 ], 50: [ 3,26 ], 48: [ 3,32 ], 47: [ 2,11 ], 43: [ 2,36 ], 42: [ 2,14 ], 41: [ 3,52 ] },
				{  },
				{ 60: [ 2,37 ], 59: [ 2,3 ], 58: [ 2,4 ], 57: [ 3,5 ], 56: [ 3,7 ], 55: [ 2,6 ], 51: [ 2,8 ], 50: [ 3,26 ], 48: [ 3,32 ], 47: [ 2,11 ], 42: [ 2,14 ], 41: [ 3,52 ] },
				{ 58: [ 2,38 ], 57: [ 3,5 ], 56: [ 3,7 ], 55: [ 2,6 ], 51: [ 2,8 ], 50: [ 3,26 ], 48: [ 3,32 ], 47: [ 2,11 ], 42: [ 2,14 ], 41: [ 3,52 ] },
				{ 57: [ 3,4 ], 56: [ 3,7 ], 55: [ 2,6 ], 51: [ 2,8 ], 50: [ 3,26 ], 48: [ 3,32 ], 47: [ 2,11 ], 42: [ 2,14 ], 41: [ 3,52 ] },
				{ 55: [ 2,39 ], 51: [ 2,8 ], 50: [ 3,26 ], 48: [ 3,32 ], 47: [ 2,11 ], 42: [ 2,14 ], 41: [ 3,52 ] },
				{ 55: [ 2,40 ], 51: [ 2,8 ], 50: [ 3,26 ], 48: [ 3,32 ], 47: [ 2,11 ], 42: [ 2,14 ], 41: [ 3,52 ] },
				{ 55: [ 2,41 ], 51: [ 2,8 ], 50: [ 3,26 ], 48: [ 3,32 ], 47: [ 2,11 ], 42: [ 2,14 ], 41: [ 3,52 ] },
				{ 55: [ 2,42 ], 51: [ 2,8 ], 50: [ 3,26 ], 48: [ 3,32 ], 47: [ 2,11 ], 42: [ 2,14 ], 41: [ 3,52 ] },
				{ 55: [ 2,43 ], 51: [ 2,8 ], 50: [ 3,26 ], 48: [ 3,32 ], 47: [ 2,11 ], 42: [ 2,14 ], 41: [ 3,52 ] },
				{ 55: [ 2,44 ], 51: [ 2,8 ], 50: [ 3,26 ], 48: [ 3,32 ], 47: [ 2,11 ], 42: [ 2,14 ], 41: [ 3,52 ] },
				{ 54: [ 2,23 ], 53: [ 3,17 ] },
				{ 51: [ 2,45 ], 50: [ 3,26 ], 48: [ 3,32 ], 47: [ 2,11 ], 42: [ 2,14 ], 41: [ 3,52 ] },
				{ 51: [ 2,46 ], 50: [ 3,26 ], 48: [ 3,32 ], 47: [ 2,11 ], 42: [ 2,14 ], 41: [ 3,52 ] },
				{ 50: [ 3,23 ], 48: [ 3,32 ], 47: [ 2,11 ], 42: [ 2,14 ], 41: [ 3,52 ] },
				{ 50: [ 3,24 ], 48: [ 3,32 ], 47: [ 2,11 ], 42: [ 2,14 ], 41: [ 3,52 ] },
				{ 50: [ 3,25 ], 48: [ 3,32 ], 47: [ 2,11 ], 42: [ 2,14 ], 41: [ 3,52 ] },
				{ 46: [ 3,34 ] },
				{ 60: [ 2,47 ], 59: [ 2,3 ], 58: [ 2,4 ], 57: [ 3,5 ], 56: [ 3,7 ], 55: [ 2,6 ], 51: [ 2,8 ], 50: [ 3,26 ], 48: [ 3,32 ], 47: [ 2,11 ], 43: [ 2,48 ], 42: [ 2,14 ], 41: [ 3,52 ] },
				{ 60: [ 2,49 ], 59: [ 2,3 ], 58: [ 2,4 ], 57: [ 3,5 ], 56: [ 3,7 ], 55: [ 2,6 ], 51: [ 2,8 ], 50: [ 3,26 ], 48: [ 3,32 ], 47: [ 2,11 ], 44: [ 2,50 ], 42: [ 2,14 ], 41: [ 3,52 ] },
				{  },
				{  },
				{ 38: [ 3,62 ], 37: [ 2,53 ] },
				{  },
				{  },
				{  },
				{  },
				{  },
				{  },
				{  },
				{  },
				{  },
				{  },
				{  },
				{ 38: [ 3,62 ], 37: [ 2,53 ] },
				{  },
				{  },
				{  },
				{  },
				{ 60: [ 3,60 ], 59: [ 2,3 ], 58: [ 2,4 ], 57: [ 3,5 ], 56: [ 3,7 ], 55: [ 2,6 ], 51: [ 2,8 ], 50: [ 3,26 ], 48: [ 3,32 ], 47: [ 2,11 ], 42: [ 2,14 ], 41: [ 3,52 ] },
				{ 38: [ 3,61 ] },
				{ 60: [ 3,0 ], 59: [ 2,3 ], 58: [ 2,4 ], 57: [ 3,5 ], 56: [ 3,7 ], 55: [ 2,6 ], 51: [ 2,8 ], 50: [ 3,26 ], 48: [ 3,32 ], 47: [ 2,11 ], 42: [ 2,14 ], 41: [ 3,52 ] },
				{ 60: [ 3,37 ], 59: [ 2,3 ], 58: [ 2,4 ], 57: [ 3,5 ], 56: [ 3,7 ], 55: [ 2,6 ], 51: [ 2,8 ], 50: [ 3,26 ], 48: [ 3,32 ], 47: [ 2,11 ], 44: [ 2,57 ], 42: [ 2,14 ], 41: [ 3,52 ] },
				{  },
				{  },
				{ 59: [ 2,59 ], 58: [ 2,4 ], 57: [ 3,5 ], 56: [ 3,7 ], 55: [ 2,6 ], 51: [ 2,8 ], 50: [ 3,26 ], 48: [ 3,32 ], 47: [ 2,11 ], 42: [ 2,14 ], 41: [ 3,52 ] },
				{ 40: [ 3,57 ], 39: [ 2,61 ] },
				{ 60: [ 3,56 ], 59: [ 2,3 ], 58: [ 2,4 ], 57: [ 3,5 ], 56: [ 3,7 ], 55: [ 2,6 ], 51: [ 2,8 ], 50: [ 3,26 ], 48: [ 3,32 ], 47: [ 2,11 ], 42: [ 2,14 ], 41: [ 3,52 ] },
				{  }
        ],
        "default-production": [
            -1, 48, -1, 1, 3, -1, 19, -1, 22, -1, -1, 36, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, 33, -1, 38, -1, -1, 63, -1, -1, 2, 9, 10, 11, 12, 13, 16, 20, 21, 63, -1, 37, -1, -1, -1, 59, -1, 38, -1, -1, -1, 58, -1, -1
        ]
    };
    
    // Get character
    static #get_char(pcb) {
        // Get next character from input stream
        if( typeof pcb.input === "function" )
            return pcb.input();

        let ch = pcb.eof;

        if( pcb.input.length > 0 ) {
            ch = pcb.input[0];
            pcb.input = pcb.input.slice(1);
        }

        return ch;
    }

    static #get_input(pcb, offset) {
        // Input buffering
        while( offset >= pcb.buf.length ) {
            if( pcb.is_eof )
                return pcb.eof;

            let ch = this.#get_char(pcb);
            if( ch === pcb.eof ) {
                pcb.is_eof = true;
                return pcb.eof;
            }

            pcb.buf += ch;
        }

        //console.log("#get_input %s, %d, %s, %d", pcb.buf, offset, pcb.buf.charAt(offset), pcb.buf.charCodeAt(offset))

        return pcb.buf.charCodeAt(offset);
    }

    static #clear_input(pcb) {
        // Purge input from buffer that is not necessary anymore

        if( pcb.buf.length ) {
            // Perform position counting.
            for( let pos = 0; pos <= pcb.len; pos++ ) {
                if( pcb.buf[pos] === '\n' ) {
                    pcb.line++;
                    pcb.column = 0;
                }
                else
                    pcb.column++;
            }

            pcb.buf = pcb.buf.slice( pcb.len );
        }

        pcb.len = 0;
        pcb.sym = -1;
    }

    static #lex(pcb) {
        // Perform lexical analysis
        let state = 0, length = 0;

        let machine = Boolean(1) ? 0 : this.#lexer["select"][pcb.tos.state];
        let next = this.#get_input(pcb, length);

        if( next === pcb.eof ) {
            pcb.sym = 0;
            return;
        }

        while( state > -1 && next !== pcb.eof ) {
            let idx = this.#lexer["index"][machine][state];
            state = -1;

            while( this.#lexer["chars"][idx * 2] > -1 ) {
                if( next >= this.#lexer["chars"][idx * 2]
                        && next <= this.#lexer["chars"][idx * 2 + 1] ) {

                    length++;
                    state = this.#lexer["transitions"][idx];

                    if( this.#lexer["accept"][machine][state] > 0 ) {
                        pcb.sym = this.#lexer["accept"][machine][state] - 1;
                        pcb.len = length;

                        // Test! (??)
                        if( pcb.sym === 0 ) {
                            state = -1;
                            break;
                        }

                        // Stop if matched symbol should be parsed nongreedy
                        if( !Boolean(this.#grammar["symbols"][pcb.sym]["is-greedy"]) ) {
                            state = -1;
                            break;
                        }
                    }

                    next = this.#get_input(pcb, length);
                    break;
                }

                idx++;
            }

            // TODO: Semantic Terminal Selection?
        }

        //console.log("lex sym = %d, len = %d", pcb.sym, pcb.len);
    }

    static #get_sym(pcb) {
        // Get lookahead symbol
        pcb.sym = -1;
        pcb.len = 0;

        // insensitive mode
        if( Boolean(1) )
            while( true )
            {
                this.#lex(pcb);

                // check for whitespace
                if( pcb.sym > -1 && Boolean(this.#grammar["symbols"][pcb.sym]["is-whitespace"]) ) {
                    this.#clear_input(pcb);
                    continue;
                }

                break;
            }

        // sensitive mode
        else if( this.#lexer["select"][pcb.tos.state] > -1 )
            this.#lex(pcb);

        // If there is no matching DFA state machine, try to identify the
        // end-of-file symbol. If this also fails, a parse error will raise.
        else if( this.constructor.#get_input(pcb, 0) === pcb.eof )
            pcb.sym = 0;

        return Boolean(pcb.sym > -1);
    }

    parse(s) {
        // Constants
        const ERROR		= 0;
        const REDUCE	= 1;
        const SHIFT		= 2;
        const SUCCESS	= 4;

        // Start of parse function
        let pcb = new LogicsParserControlBlock()
        pcb.input = s
        pcb.act = SHIFT;

        pcb.tos = new LogicsParserToken()
        pcb.stack.push(pcb.tos)

        while( true ) {
            //console.log("state = %d", pcb.tos.state);

            // Reduce
            while( pcb.act & REDUCE ) {
                // Set default left-hand side
                pcb.lhs = this.constructor.#grammar["productions"][pcb.idx]["left-hand-side"];

                //console.log("REDUCE idx = %d, prod = %s", pcb.idx, this.constructor.#grammar["productions"][pcb.idx]["production"]);
                // print("state", pcb.tos.state);

                // Call reduce function
                //console.log("CALL", "_reduce_action_%d" % pcb.idx)

                if( ( "parse_" + pcb.idx ) in pcb )
                    pcb[ "parse_" + pcb.idx ]();

                // Drop right-hand side
                let cnodes = null, node = null;

                for( let i = 0; i < this.constructor.#grammar["productions"][pcb.idx]["length"]; i++ ) {
                    let item = pcb.stack.pop();

                    if( item.node )
                    {
                        if( cnodes === null )
                            cnodes = [];

                        if( Array.isArray( item.node ) )
                            cnodes = item.node.concat(cnodes);
                        else
                            cnodes.unshift(item.node);
                    }
                }

                pcb.tos = pcb.stack[pcb.stack.length - 1];
                pcb.tos.value = pcb.ret;

                // Handle AST nodes
                if( Boolean( this.constructor.#grammar["productions"][pcb.idx]["emit"] ) ) {
                    //console.log("%s = %s", this.constructor.#grammar["productions"][pcb.idx]["production"], this.#grammar["productions"][pcb.idx]["emit"]);
                    node = new LogicsNode(this.constructor.#grammar["productions"][pcb.idx]["emit"], null, cnodes);
                }

                // Goal symbol reduced, and stack is empty?
                if( pcb.lhs === 36 && pcb.stack.length === 1 ) {
                    pcb.tos.node = node ? node : cnodes;
                    this.constructor.#clear_input(pcb);
                    pcb.act = SUCCESS;
                    break;
                }

                // Get goto table entry
                pcb.act = this.constructor.#parser["goto"][pcb.tos.state][pcb.lhs][0];
                pcb.idx = this.constructor.#parser["goto"][pcb.tos.state][pcb.lhs][1];

                pcb.tos = new LogicsParserToken();
                pcb.stack.push(pcb.tos)

                pcb.tos.symbol = this.constructor.#grammar["symbols"][pcb.lhs];
                pcb.tos.state = pcb.act & REDUCE ? -1 : pcb.idx;
                pcb.tos.value = pcb.ret;

                pcb.tos.node = node ? node : cnodes;
                pcb.tos.value = pcb.ret;

                pcb.tos.line = pcb.line;
                pcb.tos.column = pcb.column;
            }

            if( pcb.act === SUCCESS || pcb.act === ERROR )
                break;

            // Get next input symbol
            this.constructor.#get_sym(pcb);

            //console.log("pcb.sym = %d (%s)", pcb.sym, this.constructor.#grammar["symbols"][pcb.sym]["symbol"]);
            //console.log("pcb.len = %d", pcb.len);

            // Get action table entry
            if( pcb.sym in this.constructor.#parser["action"][pcb.tos.state] ) {
                pcb.act = this.constructor.#parser["action"][pcb.tos.state][pcb.sym][0];
                pcb.idx = this.constructor.#parser["action"][pcb.tos.state][pcb.sym][1];
            } else {
                // Otherwise, apply default production
                pcb.idx = this.constructor.#parser["default-production"][pcb.tos.state];

                if( pcb.idx > -1 ) {
                    pcb.act = REDUCE;
                }
                else {
                    pcb.act = 0;
                }
            }

            if( !pcb.act ) {
                throw new LogicsParseError(
                    pcb.line,
                    pcb.column,
                    Object.keys(
                        this.constructor.#parser["action"][pcb.tos.state]
                    ).map(sym => this.constructor.#grammar.symbols[sym].symbol).sort()
                );
            }

            // Shift
            if( pcb.act & SHIFT ) {
                //console.log("SHIFT sym = %d (%s)", pcb.sym, this.constructor.#grammar["symbols"][pcb.sym]["symbol"]);

                pcb.tos = new LogicsParserToken();
                pcb.stack.push(pcb.tos);

                // Execute scanner actions, if existing.
                if( ( "scan_" + pcb.idx ) in pcb )
                    pcb[ "parse_" + pcb.idx ]();

                pcb.tos.state = pcb.act & REDUCE ? -1 : pcb.idx;
                pcb.tos.symbol = this.constructor.#grammar["symbols"][pcb.sym];

                pcb.tos.line = pcb.line;
                pcb.tos.column = pcb.column;
                pcb.top = pcb.buf.slice(0, pcb.len);

                if( Boolean( pcb.tos.symbol["emit"] ) )
                    pcb.tos.node = new LogicsNode(pcb.tos.symbol["emit"], pcb.top);

                if( pcb.sym !== 0 && pcb.sym !== -1 ) {
                    this.constructor.#clear_input(pcb);
                    pcb.old_sym = -1
                }
            }
        }

        if( !pcb.ret && pcb.tos.node ) {
            if( Array.isArray( pcb.tos.node ) ) {
                if( pcb.tos.node.length > 1 )
                    return new LogicsNode(null, null, pcb.tos.node);
                else
                    return pcb.tos.node.pop();
            }

            return pcb.tos.node;
        }

        return pcb.ret;
    }
}


