// Logics: A Python-like evaluation language
// Grammar requires unicc >= 1.8, use Makefile for building.

#!mode          scanner;
#prefix         "Logics";
#whitespaces    @whitespace ;

@whitespace     ' \r\n\t'+
                | "#" !'\n'* '\n'
                ;

@Identifier     'A-Za-z_' 'A-Za-z0-9_'*                             = Identifier;
@Number         '0-9'+ '.' '0-9'* | '0-9'* '.' '0-9'+ | '0-9'+      = Number;
@String         '"' ( '\\' . | !'"' )* '"'
                | '\'' ( '\\' . | !'\'' )* '\''                     = String;


expression$     : or "if" expression "else" expression              = if
                | or
                ;

or              : or "or" and                                       = or
                | and
                ;

and             : and "and" not                                     = and
                | not
                ;

not             : "not" not                                         = not
                | cmp
                ;

cmp             : add_sub (
                    "==" add_sub                                    = eq
                    | ">" add_sub                                   = gt
                    | ">=" add_sub                                  = gteq
                    | "<" add_sub                                   = lt
                    | "<=" add_sub                                  = lteq
                    | ("!=" | "<>") add_sub                         = neq
                    )+                                              = cmp
                | add_sub
                ;

add_sub         : add_sub '+' mul_div                               = add
                | add_sub '-' mul_div                               = sub
                | mul_div
                ;

mul_div         : mul_div '*' unary                                 = mul
                | mul_div '/' unary                                 = div
                | mul_div '%' unary                                 = mod
                | unary;

pow             : pow "**" unary                                    = pow
                | unary
                ;

unary           : '+' unary                                         = pos
                | '-' unary                                         = neg
                | '~' unary                                         = invert
                | factor
                ;

factor          : atom trailer+                                     = entity
                | atom
                ;

opt_expression  : expression
                |                                                   = None
                ;

trailer         : '(' list ')'
                | '[' expression ']'
                | '[' opt_expression ':' opt_expression ']'         = slice
                | '.' @Identifier
                ;

atom            : ""True""
                | ""False""
                | ""None""
                | @Number
                | @Identifier
                | @String
                | @String+                                          = strings
                | comprehension
                | '[' list ']'
                | '(' expression ')'
                ;

comprehension   := '[' expression "for" @Identifier "in" or ( "if" expression )? ']'
                ;

list            := expression (',' expression )+
                |  expression
                ;
