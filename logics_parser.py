#!/usr/bin/python
#-*- coding: utf-8 -*-

# Parser module generated by unicc from logics.par.
# DO NOT EDIT THIS FILE MANUALLY, IT WILL GO AWAY!


class Node(object):
	"""
	This is an AST node.
	"""

	def __init__(self, emit = None, match = None, children = None):
		self.emit = emit
		self.match = match
		self.children = children or []

	def dump(self, level=0):
		if self.emit:
			txt = "%s%s" % (level * " ", self.emit)
			if self.match and self.match != self.emit:
				txt += " (%s)" % self.match

			print(txt)
			level += 1

		for child in self.children:
			child.dump(level)


class ParseException(Exception):
	"""
	Exception to be raised on a parse error.
	"""

	def __init__(self, row, col, txt = None):
		if isinstance(txt, list):
			expecting = txt
			txt = ("Line %d, column %d: Parse error, expecting %s" %
					(row, col, ", ".join([("%r" % symbol[0])
						for symbol in txt])))
		else:
			expecting = None

		super(ParseException, self).__init__(txt)

		self.row = row
		self.col = col
		self.expecting = expecting


class ParserToken(object):
	state = 0
	line = 0
	column = 0

	node = None

	value = None


class ParserControlBlock(object):

	# Stack
	stack = None
	tos = None

	# Values
	ret = None

	# State
	act = None
	idx = None
	lhs = None

	# Lookahead
	sym = -1
	old_sym = -1
	len = 0

	# Lexical analysis
	lexem = None
	next = None
	eof = None
	is_eof = None

	# Input buffering
	input = None
	buf = ""

	# Error handling
	error_delay = 3
	error_count = 0

	line = 1
	column = 1

	


class Parser(object):

	# Actions
	_ERROR = 0
	_REDUCE = 1
	_SHIFT = 2

	# Parse tables
	_symbols = (
		("&eof", "", 3, 0, 0, 1),
		("<=", "<=", 2, 0, 0, 1),
		("or", "or", 2, 0, 0, 1),
		("if", "if", 2, 0, 0, 1),
		("else", "else", 2, 0, 0, 1),
		("not", "not", 2, 0, 0, 1),
		("and", "and", 2, 0, 0, 1),
		(">=", ">=", 2, 0, 0, 1),
		("==", "==", 2, 0, 0, 1),
		("<", "<", 2, 0, 0, 1),
		("True", "True", 2, 0, 0, 1),
		("**", "**", 2, 0, 0, 1),
		("for", "for", 2, 0, 0, 1),
		("False", "False", 2, 0, 0, 1),
		("<>", "<>", 2, 0, 0, 1),
		(">", ">", 2, 0, 0, 1),
		("in", "in", 2, 0, 0, 1),
		("!=", "!=", 2, 0, 0, 1),
		("whitespace", "", 2, 0, 1, 1),
		("IDENT", "IDENT", 2, 0, 0, 1),
		("STRING", "STRING", 2, 0, 0, 0),
		("NUMBER", "NUMBER", 2, 0, 0, 1),
		("[", "", 1, 0, 0, 1),
		("]", "", 1, 0, 0, 1),
		(".", "", 1, 0, 0, 1),
		("*", "", 1, 0, 0, 1),
		("-", "", 1, 0, 0, 1),
		(")", "", 1, 0, 0, 1),
		("+", "", 1, 0, 0, 1),
		("%", "", 1, 0, 0, 1),
		("~", "", 1, 0, 0, 1),
		("/", "", 1, 0, 0, 1),
		(",", "", 1, 0, 0, 1),
		("(", "", 1, 0, 0, 1),
		("trailer+", "", 0, 0, 0, 1),
		("atom", "", 0, 0, 0, 1),
		("trailer", "", 0, 0, 0, 1),
		("&embedded_7", "", 0, 0, 0, 1),
		("&embedded_6?", "", 0, 0, 0, 1),
		("&embedded_7*", "", 0, 0, 0, 1),
		("&embedded_7+", "", 0, 0, 0, 1),
		("&embedded_6", "", 0, 0, 0, 1),
		("&embedded_5", "", 0, 0, 0, 1),
		("list", "", 0, 0, 0, 1),
		("comprehension", "", 0, 0, 0, 1),
		("STRING+", "", 0, 0, 0, 1),
		("&embedded_0", "", 0, 0, 0, 1),
		("&embedded_0+", "", 0, 0, 0, 1),
		("and_test", "", 0, 0, 0, 1),
		("if_else", "", 0, 0, 0, 1),
		("or_test", "", 0, 0, 0, 1),
		("&embedded_1+", "", 0, 0, 0, 1),
		("&embedded_1", "", 0, 0, 0, 1),
		("not_test", "", 0, 0, 0, 1),
		("expr", "", 0, 0, 0, 1),
		("comparison", "", 0, 0, 0, 1),
		("test", "", 0, 0, 0, 1),
		("factor", "", 0, 0, 0, 1),
		("term", "", 0, 0, 0, 1),
		("&embedded_4", "", 0, 0, 0, 1),
		("entity", "", 0, 0, 0, 1),
		("power", "", 0, 0, 0, 1),
		("logic", "", 0, 0, 0, 1),
		("expression", "", 0, 0, 0, 1),
		("&embedded_2", "", 0, 0, 0, 1),
		("&embedded_3+", "", 0, 0, 0, 1),
		("&embedded_3", "", 0, 0, 0, 1)
	)
	_productions = (
		("logic -> expression ~&eof", "", 2, 62),
		("expression -> test", "", 1, 63),
		("test -> if_else", "", 1, 56),
		("test -> or_test", "", 1, 56),
		("if_else -> or_test \"if\" or_test \"else\" test", "if_else", 5, 49),
		("or_test -> and_test &embedded_0+", "or_test", 2, 50),
		("&embedded_0 -> \"or\" and_test", "", 2, 46),
		("&embedded_0+ -> &embedded_0+ &embedded_0", "", 2, 47),
		("&embedded_0+ -> &embedded_0", "", 1, 47),
		("or_test -> and_test", "", 1, 50),
		("and_test -> not_test &embedded_1+", "and_test", 2, 48),
		("&embedded_1 -> \"and\" not_test", "", 2, 52),
		("&embedded_1+ -> &embedded_1+ &embedded_1", "", 2, 51),
		("&embedded_1+ -> &embedded_1", "", 1, 51),
		("and_test -> not_test", "", 1, 48),
		("not_test -> \"not\" not_test", "not_test", 2, 53),
		("not_test -> comparison", "", 1, 53),
		("comparison -> expr &embedded_3+", "comparison", 2, 55),
		("&embedded_2 -> \"==\"", "", 1, 64),
		("&embedded_2 -> \">=\"", "", 1, 64),
		("&embedded_2 -> \"<=\"", "", 1, 64),
		("&embedded_2 -> \"<\"", "", 1, 64),
		("&embedded_2 -> \">\"", "", 1, 64),
		("&embedded_2 -> \"<>\"", "", 1, 64),
		("&embedded_2 -> \"!=\"", "", 1, 64),
		("&embedded_2 -> \"in\"", "", 1, 64),
		("&embedded_2 -> \"not\" \"in\"", "", 2, 64),
		("&embedded_3 -> &embedded_2 expr", "", 2, 66),
		("&embedded_3+ -> &embedded_3+ &embedded_3", "", 2, 65),
		("&embedded_3+ -> &embedded_3", "", 1, 65),
		("comparison -> expr", "", 1, 55),
		("expr -> expr '+' term", "add", 3, 54),
		("expr -> expr '-' term", "sub", 3, 54),
		("expr -> term", "", 1, 54),
		("term -> term '*' factor", "mul", 3, 58),
		("term -> term '/' factor", "div", 3, 58),
		("term -> term '%' factor", "mod", 3, 58),
		("term -> factor", "", 1, 58),
		("&embedded_4 -> '+'", "", 1, 59),
		("&embedded_4 -> '-'", "", 1, 59),
		("&embedded_4 -> '~'", "", 1, 59),
		("factor -> &embedded_4 factor", "factor", 2, 57),
		("factor -> power", "", 1, 57),
		("power -> entity \"**\" factor", "power", 3, 61),
		("power -> entity", "", 1, 61),
		("entity -> atom trailer+", "entity", 2, 60),
		("trailer+ -> trailer+ trailer", "", 2, 34),
		("trailer+ -> trailer", "", 1, 34),
		("entity -> atom", "", 1, 60),
		("trailer -> '(' list ')'", "", 3, 36),
		("trailer -> '[' expression ']'", "", 3, 36),
		("trailer -> '.' @IDENT", "", 2, 36),
		("&embedded_5 -> \"True\"", "", 1, 42),
		("&embedded_5 -> \"False\"", "", 1, 42),
		("atom -> &embedded_5", "", 1, 35),
		("atom -> @NUMBER", "", 1, 35),
		("atom -> @IDENT", "", 1, 35),
		("STRING+ -> STRING+ @STRING", "", 2, 45),
		("STRING+ -> @STRING", "", 1, 45),
		("atom -> STRING+", "strings", 1, 35),
		("atom -> comprehension", "", 1, 35),
		("atom -> '[' list ']'", "", 3, 35),
		("atom -> '(' expression ')'", "atom", 3, 35),
		("comprehension -> '[' expression \"for\" @IDENT \"in\" or_test &embedded_6? ']'", "comprehension", 8, 44),
		("&embedded_6 -> \"if\" expression", "", 2, 41),
		("&embedded_6? -> &embedded_6", "", 1, 38),
		("&embedded_6? -> ", "", 0, 38),
		("list -> expression &embedded_7*", "list", 2, 43),
		("&embedded_7 -> ',' expression", "", 2, 37),
		("&embedded_7+ -> &embedded_7+ &embedded_7", "", 2, 40),
		("&embedded_7+ -> &embedded_7", "", 1, 40),
		("&embedded_7* -> &embedded_7+", "", 1, 39),
		("&embedded_7* -> ", "", 0, 39),
		("list -> ", "list", 0, 43)
	)
	_act = (
		((19, 3, 56), (20, 3, 58), (21, 3, 55), (5, 2, 5), (28, 3, 38), (26, 3, 39), (30, 3, 40), (33, 2, 11), (22, 2, 12), (10, 3, 52), (13, 3, 53), ),
		((0, 3, 0), ),
		((3, 2, 14), ),
		((2, 2, 15), ),
		((6, 2, 17), ),
		((19, 3, 56), (20, 3, 58), (21, 3, 55), (5, 2, 5), (28, 3, 38), (26, 3, 39), (30, 3, 40), (33, 2, 11), (22, 2, 12), (10, 3, 52), (13, 3, 53), ),
		((5, 2, 19), (8, 3, 18), (7, 3, 19), (1, 3, 20), (9, 3, 21), (15, 3, 22), (14, 3, 23), (17, 3, 24), (16, 3, 25), (28, 2, 22), (26, 2, 23), ),
		((25, 2, 24), (31, 2, 25), (29, 2, 26), ),
		((19, 3, 56), (20, 3, 58), (21, 3, 55), (28, 3, 38), (26, 3, 39), (30, 3, 40), (33, 2, 11), (22, 2, 12), (10, 3, 52), (13, 3, 53), ),
		((11, 2, 27), ),
		((33, 2, 29), (22, 2, 30), (24, 2, 31), ),
		((19, 3, 56), (20, 3, 58), (21, 3, 55), (5, 2, 5), (28, 3, 38), (26, 3, 39), (30, 3, 40), (33, 2, 11), (22, 2, 12), (10, 3, 52), (13, 3, 53), ),
		((19, 3, 56), (20, 3, 58), (21, 3, 55), (5, 2, 5), (28, 3, 38), (26, 3, 39), (30, 3, 40), (33, 2, 11), (22, 2, 12), (10, 3, 52), (13, 3, 53), ),
		((20, 3, 57), ),
		((19, 3, 56), (20, 3, 58), (21, 3, 55), (5, 2, 5), (28, 3, 38), (26, 3, 39), (30, 3, 40), (33, 2, 11), (22, 2, 12), (10, 3, 52), (13, 3, 53), ),
		((19, 3, 56), (20, 3, 58), (21, 3, 55), (5, 2, 5), (28, 3, 38), (26, 3, 39), (30, 3, 40), (33, 2, 11), (22, 2, 12), (10, 3, 52), (13, 3, 53), ),
		((2, 2, 15), ),
		((19, 3, 56), (20, 3, 58), (21, 3, 55), (5, 2, 5), (28, 3, 38), (26, 3, 39), (30, 3, 40), (33, 2, 11), (22, 2, 12), (10, 3, 52), (13, 3, 53), ),
		((6, 2, 17), ),
		((16, 3, 26), ),
		((19, 3, 56), (20, 3, 58), (21, 3, 55), (28, 3, 38), (26, 3, 39), (30, 3, 40), (33, 2, 11), (22, 2, 12), (10, 3, 52), (13, 3, 53), ),
		((5, 2, 19), (8, 3, 18), (7, 3, 19), (1, 3, 20), (9, 3, 21), (15, 3, 22), (14, 3, 23), (17, 3, 24), (16, 3, 25), ),
		((19, 3, 56), (20, 3, 58), (21, 3, 55), (28, 3, 38), (26, 3, 39), (30, 3, 40), (33, 2, 11), (22, 2, 12), (10, 3, 52), (13, 3, 53), ),
		((19, 3, 56), (20, 3, 58), (21, 3, 55), (28, 3, 38), (26, 3, 39), (30, 3, 40), (33, 2, 11), (22, 2, 12), (10, 3, 52), (13, 3, 53), ),
		((19, 3, 56), (20, 3, 58), (21, 3, 55), (28, 3, 38), (26, 3, 39), (30, 3, 40), (33, 2, 11), (22, 2, 12), (10, 3, 52), (13, 3, 53), ),
		((19, 3, 56), (20, 3, 58), (21, 3, 55), (28, 3, 38), (26, 3, 39), (30, 3, 40), (33, 2, 11), (22, 2, 12), (10, 3, 52), (13, 3, 53), ),
		((19, 3, 56), (20, 3, 58), (21, 3, 55), (28, 3, 38), (26, 3, 39), (30, 3, 40), (33, 2, 11), (22, 2, 12), (10, 3, 52), (13, 3, 53), ),
		((19, 3, 56), (20, 3, 58), (21, 3, 55), (28, 3, 38), (26, 3, 39), (30, 3, 40), (33, 2, 11), (22, 2, 12), (10, 3, 52), (13, 3, 53), ),
		((33, 2, 29), (22, 2, 30), (24, 2, 31), ),
		((19, 3, 56), (20, 3, 58), (21, 3, 55), (5, 2, 5), (28, 3, 38), (26, 3, 39), (30, 3, 40), (33, 2, 11), (22, 2, 12), (10, 3, 52), (13, 3, 53), ),
		((19, 3, 56), (20, 3, 58), (21, 3, 55), (5, 2, 5), (28, 3, 38), (26, 3, 39), (30, 3, 40), (33, 2, 11), (22, 2, 12), (10, 3, 52), (13, 3, 53), ),
		((19, 3, 51), ),
		((27, 3, 62), ),
		((12, 2, 42), (32, 2, 43), ),
		((23, 3, 61), ),
		((4, 2, 45), ),
		((28, 2, 22), (26, 2, 23), ),
		((25, 2, 24), (31, 2, 25), (29, 2, 26), ),
		((25, 2, 24), (31, 2, 25), (29, 2, 26), ),
		((32, 2, 43), ),
		((27, 3, 49), ),
		((23, 3, 50), ),
		((19, 2, 46), ),
		((19, 3, 56), (20, 3, 58), (21, 3, 55), (5, 2, 5), (28, 3, 38), (26, 3, 39), (30, 3, 40), (33, 2, 11), (22, 2, 12), (10, 3, 52), (13, 3, 53), ),
		((32, 2, 43), ),
		((19, 3, 56), (20, 3, 58), (21, 3, 55), (5, 2, 5), (28, 3, 38), (26, 3, 39), (30, 3, 40), (33, 2, 11), (22, 2, 12), (10, 3, 52), (13, 3, 53), ),
		((16, 2, 47), ),
		((19, 3, 56), (20, 3, 58), (21, 3, 55), (5, 2, 5), (28, 3, 38), (26, 3, 39), (30, 3, 40), (33, 2, 11), (22, 2, 12), (10, 3, 52), (13, 3, 53), ),
		((3, 2, 49), ),
		((19, 3, 56), (20, 3, 58), (21, 3, 55), (5, 2, 5), (28, 3, 38), (26, 3, 39), (30, 3, 40), (33, 2, 11), (22, 2, 12), (10, 3, 52), (13, 3, 53), ),
		((23, 3, 63), )
	)
	_go = (
		((63, 2, 1), (56, 3, 1), (49, 3, 2), (50, 2, 2), (48, 2, 3), (53, 2, 4), (55, 3, 16), (54, 2, 6), (58, 2, 7), (57, 3, 37), (59, 2, 8), (61, 3, 42), (60, 2, 9), (35, 2, 10), (42, 3, 54), (45, 2, 13), (44, 3, 60), ),
		(),
		(),
		((46, 3, 8), (47, 2, 16), ),
		((52, 3, 13), (51, 2, 18), ),
		((53, 3, 15), (55, 3, 16), (54, 2, 6), (58, 2, 7), (57, 3, 37), (59, 2, 8), (61, 3, 42), (60, 2, 9), (35, 2, 10), (42, 3, 54), (45, 2, 13), (44, 3, 60), ),
		((64, 2, 20), (66, 3, 29), (65, 2, 21), ),
		(),
		((57, 3, 41), (59, 2, 8), (61, 3, 42), (60, 2, 9), (35, 2, 10), (42, 3, 54), (45, 2, 13), (44, 3, 60), ),
		(),
		((36, 3, 47), (34, 2, 28), ),
		((63, 2, 32), (56, 3, 1), (49, 3, 2), (50, 2, 2), (48, 2, 3), (53, 2, 4), (55, 3, 16), (54, 2, 6), (58, 2, 7), (57, 3, 37), (59, 2, 8), (61, 3, 42), (60, 2, 9), (35, 2, 10), (42, 3, 54), (45, 2, 13), (44, 3, 60), ),
		((63, 2, 33), (56, 3, 1), (49, 3, 2), (50, 2, 2), (48, 2, 3), (53, 2, 4), (55, 3, 16), (54, 2, 6), (58, 2, 7), (57, 3, 37), (59, 2, 8), (61, 3, 42), (60, 2, 9), (35, 2, 10), (43, 2, 34), (42, 3, 54), (45, 2, 13), (44, 3, 60), ),
		(),
		((50, 2, 35), (48, 2, 3), (53, 2, 4), (55, 3, 16), (54, 2, 6), (58, 2, 7), (57, 3, 37), (59, 2, 8), (61, 3, 42), (60, 2, 9), (35, 2, 10), (42, 3, 54), (45, 2, 13), (44, 3, 60), ),
		((48, 3, 6), (53, 2, 4), (55, 3, 16), (54, 2, 6), (58, 2, 7), (57, 3, 37), (59, 2, 8), (61, 3, 42), (60, 2, 9), (35, 2, 10), (42, 3, 54), (45, 2, 13), (44, 3, 60), ),
		((46, 3, 7), ),
		((53, 3, 11), (55, 3, 16), (54, 2, 6), (58, 2, 7), (57, 3, 37), (59, 2, 8), (61, 3, 42), (60, 2, 9), (35, 2, 10), (42, 3, 54), (45, 2, 13), (44, 3, 60), ),
		((52, 3, 12), ),
		(),
		((54, 2, 36), (58, 2, 7), (57, 3, 37), (59, 2, 8), (61, 3, 42), (60, 2, 9), (35, 2, 10), (42, 3, 54), (45, 2, 13), (44, 3, 60), ),
		((64, 2, 20), (66, 3, 28), ),
		((58, 2, 37), (57, 3, 37), (59, 2, 8), (61, 3, 42), (60, 2, 9), (35, 2, 10), (42, 3, 54), (45, 2, 13), (44, 3, 60), ),
		((58, 2, 38), (57, 3, 37), (59, 2, 8), (61, 3, 42), (60, 2, 9), (35, 2, 10), (42, 3, 54), (45, 2, 13), (44, 3, 60), ),
		((57, 3, 34), (59, 2, 8), (61, 3, 42), (60, 2, 9), (35, 2, 10), (42, 3, 54), (45, 2, 13), (44, 3, 60), ),
		((57, 3, 35), (59, 2, 8), (61, 3, 42), (60, 2, 9), (35, 2, 10), (42, 3, 54), (45, 2, 13), (44, 3, 60), ),
		((57, 3, 36), (59, 2, 8), (61, 3, 42), (60, 2, 9), (35, 2, 10), (42, 3, 54), (45, 2, 13), (44, 3, 60), ),
		((57, 3, 43), (59, 2, 8), (61, 3, 42), (60, 2, 9), (35, 2, 10), (42, 3, 54), (45, 2, 13), (44, 3, 60), ),
		((36, 3, 46), ),
		((63, 2, 39), (56, 3, 1), (49, 3, 2), (50, 2, 2), (48, 2, 3), (53, 2, 4), (55, 3, 16), (54, 2, 6), (58, 2, 7), (57, 3, 37), (59, 2, 8), (61, 3, 42), (60, 2, 9), (35, 2, 10), (43, 2, 40), (42, 3, 54), (45, 2, 13), (44, 3, 60), ),
		((63, 2, 41), (56, 3, 1), (49, 3, 2), (50, 2, 2), (48, 2, 3), (53, 2, 4), (55, 3, 16), (54, 2, 6), (58, 2, 7), (57, 3, 37), (59, 2, 8), (61, 3, 42), (60, 2, 9), (35, 2, 10), (42, 3, 54), (45, 2, 13), (44, 3, 60), ),
		(),
		(),
		((37, 3, 70), (40, 2, 44), (39, 3, 67), ),
		(),
		(),
		(),
		(),
		(),
		((37, 3, 70), (40, 2, 44), (39, 3, 67), ),
		(),
		(),
		(),
		((63, 3, 68), (56, 3, 1), (49, 3, 2), (50, 2, 2), (48, 2, 3), (53, 2, 4), (55, 3, 16), (54, 2, 6), (58, 2, 7), (57, 3, 37), (59, 2, 8), (61, 3, 42), (60, 2, 9), (35, 2, 10), (42, 3, 54), (45, 2, 13), (44, 3, 60), ),
		((37, 3, 69), ),
		((56, 3, 4), (49, 3, 2), (50, 2, 2), (48, 2, 3), (53, 2, 4), (55, 3, 16), (54, 2, 6), (58, 2, 7), (57, 3, 37), (59, 2, 8), (61, 3, 42), (60, 2, 9), (35, 2, 10), (42, 3, 54), (45, 2, 13), (44, 3, 60), ),
		(),
		((50, 2, 48), (48, 2, 3), (53, 2, 4), (55, 3, 16), (54, 2, 6), (58, 2, 7), (57, 3, 37), (59, 2, 8), (61, 3, 42), (60, 2, 9), (35, 2, 10), (42, 3, 54), (45, 2, 13), (44, 3, 60), ),
		((41, 3, 65), (38, 2, 50), ),
		((63, 3, 64), (56, 3, 1), (49, 3, 2), (50, 2, 2), (48, 2, 3), (53, 2, 4), (55, 3, 16), (54, 2, 6), (58, 2, 7), (57, 3, 37), (59, 2, 8), (61, 3, 42), (60, 2, 9), (35, 2, 10), (42, 3, 54), (45, 2, 13), (44, 3, 60), ),
		()
	)

	_def_prod = (-1, -1, 3, 9, 14, -1, 30, 33, -1, 44, 48, -1, 73, 59, -1, -1, 5, -1, 10, -1, -1, 17, -1, -1, -1, -1, -1, -1, 45, 73, -1, -1, -1, 72, -1, -1, 27, 31, 32, 72, -1, -1, -1, -1, 71, -1, -1, -1, 66, -1, -1)

	# Lexical analysis
	_dfa_select = ()
	_dfa_index = (
		(0, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 54, 57, 59, 65, 66, 67, 68, 72, 73, 74, 75, 76, 77, 78, 79, 84, 89, 94, 99, 104, 109, 114, 119, 124, 126, 128, 135, 136, 142, 148, 155, 161, 165, 172, 178, 185, 187, 196, 202, 209, 215, 222, 227, 234, 241, 248, 255, 262, 269, 276, 283, 290),
	)
	_dfa_chars = ((33, 33), (34, 34), (35, 35), (37, 37), (39, 39), (40, 40), (41, 41), (42, 42), (43, 43), (44, 44), (45, 45), (46, 46), (47, 47), (48, 57), (60, 60), (61, 61), (62, 62), (70, 70), (84, 84), (91, 91), (93, 93), (97, 97), (101, 101), (102, 102), (105, 105), (110, 110), (111, 111), (126, 126), (9, 10), (13, 13), (32, 32), (65, 69), (71, 83), (85, 90), (95, 95), (98, 100), (103, 104), (106, 109), (112, 122), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (42, 42), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (48, 57), (-1, -1), (-1, -1), (46, 46), (48, 57), (-1, -1), (61, 61), (62, 62), (-1, -1), (61, 61), (-1, -1), (97, 97), (48, 57), (65, 90), (95, 95), (98, 122), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (9, 10), (13, 13), (32, 32), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (61, 61), (-1, -1), (48, 57), (-1, -1), (114, 114), (48, 57), (65, 90), (95, 95), (97, 113), (115, 122), (-1, -1), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (110, 110), (48, 57), (65, 90), (95, 95), (97, 109), (111, 122), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (10, 10), (0, 9), (11, 65535), (-1, -1), (108, 108), (48, 57), (65, 90), (95, 95), (97, 107), (109, 122), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (111, 111), (48, 57), (65, 90), (95, 95), (97, 110), (112, 122), (-1, -1), (61, 61), (-1, -1), (102, 102), (110, 110), (48, 57), (65, 90), (95, 95), (97, 101), (103, 109), (111, 122), (-1, -1), (34, 34), (92, 92), (0, 33), (35, 91), (93, 65535), (-1, -1), (111, 111), (48, 57), (65, 90), (95, 95), (97, 110), (112, 122), (-1, -1), (39, 39), (92, 92), (0, 38), (40, 91), (93, 65535), (-1, -1), (114, 114), (48, 57), (65, 90), (95, 95), (97, 113), (115, 122), (-1, -1), (48, 57), (65, 90), (95, 95), (97, 122), (-1, -1), (117, 117), (48, 57), (65, 90), (95, 95), (97, 116), (118, 122), (-1, -1), (100, 100), (48, 57), (65, 90), (95, 95), (97, 99), (101, 122), (-1, -1), (115, 115), (48, 57), (65, 90), (95, 95), (97, 114), (116, 122), (-1, -1), (116, 116), (48, 57), (65, 90), (95, 95), (97, 115), (117, 122), (-1, -1), (101, 101), (48, 57), (65, 90), (95, 95), (97, 100), (102, 122), (-1, -1), (101, 101), (48, 57), (65, 90), (95, 95), (97, 100), (102, 122), (-1, -1), (101, 101), (48, 57), (65, 90), (95, 95), (97, 100), (102, 122), (-1, -1), (114, 114), (48, 57), (65, 90), (95, 95), (97, 113), (115, 122), (-1, -1), (115, 115), (48, 57), (65, 90), (95, 95), (97, 114), (116, 122), (-1, -1), (108, 108), (48, 57), (65, 90), (95, 95), (97, 107), (109, 122), (-1, -1))
	_dfa_trans = (34, 39, 42, 1, 44, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 46, 12, 13, 36, 14, 15, 40, 43, 45, 47, 49, 51, 16, 17, 17, 17, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, -1, -1, 20, -1, -1, -1, -1, 35, -1, -1, 35, 10, -1, 21, 22, -1, 24, -1, 62, 52, 52, 52, 52, -1, -1, -1, -1, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, 52, 52, 52, 52, -1, 52, 52, 52, 52, -1, 52, 52, 52, 52, -1, 52, 52, 52, 52, -1, 52, 52, 52, 52, -1, 52, 52, 52, 52, -1, 52, 52, 52, 52, -1, 52, 52, 52, 52, -1, 52, 52, 52, 52, -1, 18, -1, 35, -1, 53, 52, 52, 52, 52, 52, -1, -1, 19, 48, 39, 39, 39, -1, 19, 48, 39, 39, 39, -1, 54, 52, 52, 52, 52, 52, -1, 19, 50, 44, 44, 44, -1, 37, 42, 42, -1, 55, 52, 52, 52, 52, 52, -1, 19, 50, 44, 44, 44, -1, 60, 52, 52, 52, 52, 52, -1, 23, -1, 25, 26, 52, 52, 52, 52, 52, 52, -1, 38, 48, 39, 39, 39, -1, 56, 52, 52, 52, 52, 52, -1, 41, 50, 44, 44, 44, -1, 27, 52, 52, 52, 52, 52, -1, 52, 52, 52, 52, -1, 57, 52, 52, 52, 52, 52, -1, 28, 52, 52, 52, 52, 52, -1, 58, 52, 52, 52, 52, 52, -1, 30, 52, 52, 52, 52, 52, -1, 31, 52, 52, 52, 52, 52, -1, 32, 52, 52, 52, 52, 52, -1, 33, 52, 52, 52, 52, 52, -1, 29, 52, 52, 52, 52, 52, -1, 59, 52, 52, 52, 52, 52, -1, 61, 52, 52, 52, 52, 52, -1)
	_dfa_accept = (
		(0, 30, 34, 28, 26, 29, 33, 27, 25, 32, 22, 10, 16, 20, 23, 24, 31, 19, 18, 21, 12, 2, 15, 9, 8, 4, 17, 3, 7, 13, 6, 11, 5, 14, 0, 22, 20, 19, 21, 0, 20, 21, 0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20),
	)

	# Parsing actions



	# Parsing algorithm

	def _get_act(self, pcb):
		# Get action table entry

		# Check action table first
		for (sym, pcb.act, pcb.idx) in self._act[pcb.tos.state]:
			if sym == pcb.sym:
				return True if pcb.act else False #enforced parse error

		# Otherwise, apply default production
		pcb.idx = self._def_prod[pcb.tos.state]
		if pcb.idx > -1:
			pcb.act = self._REDUCE
			return True

		return False

	def _get_go(self, pcb):
		# Get goto table entry

		for (sym, pcb.act, pcb.idx) in self._go[pcb.tos.state]:
			if sym == pcb.lhs:
				return True

		return False

	def _get_char(self, pcb):
		# Get next character from input stream

		if callable(pcb.input):
			return pcb.input()

		if pcb.input:
			ch = pcb.input[0]
			pcb.input = pcb.input[1:]
		else:
			ch = pcb.eof

		return ch

	def _get_input(self, pcb, offset):
		# Performs input buffering

		while offset >= len(pcb.buf):
			if pcb.is_eof:
				return pcb.eof

			ch = self._get_char(pcb)
			if ch == pcb.eof:
				pcb.is_eof = True
				return pcb.eof

			pcb.buf += ch

		#print("_get_input", pcb.buf, offset, pcb.buf[offset], ord(pcb.buf[offset]))

		return ord(pcb.buf[offset])

	def _clear_input(self, pcb):
		# Purge input from buffer that is not necessary anymore

		if pcb.buf:

			# Perform position counting.
			for pos in range(0, pcb.len):
				ch = pcb.buf[pos]
				if ch == '\n':
					pcb.line += 1
					pcb.column = 0
				else:
					pcb.column += 1

			pcb.buf = pcb.buf[pcb.len:]

		pcb.len = 0
		pcb.sym = -1

	def _lex(self, pcb):
		# Lexical analysis

		state = length = 0
		machine = self._dfa_select[pcb.tos.state] if not 1 else 0
		next = self._get_input(pcb, length)

		if next == pcb.eof:
			pcb.sym = 0
			return

		while state > -1 and next != pcb.eof:
			idx = self._dfa_index[machine][state]
			state = -1

			while self._dfa_chars[idx][0] > -1:
				if (next >= self._dfa_chars[idx][0]
					and next <= self._dfa_chars[idx][1]):

					length += 1
					state = self._dfa_trans[idx]

					if self._dfa_accept[machine][state] > 0:
						pcb.sym = self._dfa_accept[machine][state] - 1
						pcb.len = length

						# Test! (??)
						if pcb.sym == 0:
							state = -1
							break

						# Stop if matched symbol should be parsed nongreedy
						if not self._symbols[pcb.sym][5]:
							state = -1
							break

					next = self._get_input(pcb, length)
					break

				idx += 1

			# TODO: Semantic Terminal Selection?

		#print("_lex", pcb.sym, pcb.len)

	def _get_sym(self, pcb):
		# Get lookahead symbol

		pcb.sym = -1
		pcb.len = 0

		# insensitive mode
		if 1:
			while True:
				self._lex(pcb)

				# check for whitespace
				if pcb.sym > -1 and self._symbols[pcb.sym][4]:
					self._clear_input(pcb)
					continue

				break

		# sensitive mode
		else:
			if self._dfa_select[pcb.tos.state] > -1:
				self._lex(pcb)

			# If there is no matching DFA state machine, try to identify the
			# end-of-file symbol. If this also fails, a parse error will raise.
			elif self._get_input(pcb, 0) == pcb.eof:
				pcb.sym = 0

		return pcb.sym > -1

	def parse(self, s = None):
		if s is None:
			try:
				s = raw_input(">")
			except NameError:
				s = input(">")

		pcb = ParserControlBlock()
		pcb.stack = []
		pcb.input = s

		pcb.tos = ParserToken()
		pcb.stack.append(pcb.tos)

		while True:
			#print("state = %d" % pcb.tos.state)

			# TODO: Error Recovery
			self._get_sym(pcb)

			#print("pcb.sym = %d (%s)" % (pcb.sym, self._symbols[pcb.sym][0]))
			#print("pcb.len = %d" % pcb.len)

			# Get action table entry
			if not self._get_act(pcb):
				raise ParseError(pcb.line, pcb.column,
					[self._symbols[sym]
						for (sym, pcb.act, pcb.idx)
							in self._act[pcb.tos.state]])

			#print("pcb.act = %d" % pcb.act)

			# Shift
			if pcb.act & self._SHIFT:
				#print("SHIFT", pcb.sym, self._symbols[pcb.sym])

				pcb.tos = ParserToken()
				pcb.stack.append(pcb.tos)

				# Execute scanner actions, if existing.
				scan_fn = getattr(self, "_scan_action_%d" % pcb.sym, None)
				if scan_fn:
					scan_fn(pcb)

				pcb.tos.state = -1 if pcb.act & self._REDUCE else pcb.idx
				pcb.tos.symbol = self._symbols[pcb.sym]

				pcb.tos.line = pcb.line
				pcb.tos.column = pcb.column
				pcb.stack[-1 - 0].value = pcb.buf[:pcb.len]

				if pcb.tos.symbol[1]:
					pcb.tos.node = Node(pcb.tos.symbol[1], pcb.stack[-1 - 0].value)

				if pcb.sym != 0 and pcb.sym != -1:
					self._clear_input(pcb)
					pcb.old_sym = -1

			# Reduce
			while pcb.act & self._REDUCE:

				# Set default left-hand side
				pcb.lhs = self._productions[pcb.idx][3]

				#print("REDUCE", pcb.idx, self._productions[pcb.idx][0])
				#print("state", pcb.tos.state)

				# Call reduce function
				#print("CALL", "_reduce_action_%d" % pcb.idx)
				reduce_fn = getattr(self, "_reduce_action_%d" % pcb.idx, None)
				if reduce_fn:
					reduce_fn(pcb)

				# Drop right-hand side
				cnodes = None
				for _ in range(0, self._productions[pcb.idx][2]):
					item = pcb.stack.pop()

					if item.node:
						if cnodes is None:
							cnodes = []

						if isinstance(item.node, list):
							cnodes = item.node + cnodes
						else:
							cnodes.insert(0, item.node)

				pcb.tos = pcb.stack[-1]

				# Handle AST nodes
				if self._productions[pcb.idx][1]:
					#print("%s = %s" % (self._productions[pcb.idx][0], self._productions[pcb.idx][1]))
					node = Node(self._productions[pcb.idx][1],
											children=cnodes)

				else:
					node = None

				# Goal symbol reduced, and stack is empty?
				if pcb.lhs == 62 and len(pcb.stack) == 1:
					pcb.tos.node = node or cnodes
					self._clear_input(pcb)
					break

				self._get_go(pcb)

				pcb.tos = ParserToken()
				pcb.stack.append(pcb.tos)

				pcb.tos.symbol = self._symbols[pcb.lhs]
				pcb.tos.state = -1 if pcb.act & self._REDUCE else pcb.idx
				pcb.tos.value = pcb.ret
				pcb.tos.node = node or cnodes
				pcb.tos.line = pcb.line
				pcb.tos.column = pcb.column

			if pcb.act & self._REDUCE and pcb.idx == 0:
				break

		if pcb.ret is None and pcb.tos.node:
			if isinstance(pcb.tos.node, list):
				if len(pcb.tos.node) > 1:
					node = Node(children=pcb.tos.node)
				else:
					node = pcb.tos.node[0]
			else:
				node = pcb.tos.node
		else:
			node = None

		return pcb.ret or node



if __name__ == "__main__":
	import sys

	p = Parser()
	ret = p.parse(sys.argv[1] if len(sys.argv) > 1 else None)

	if isinstance(ret, Node):
		ret.dump()

